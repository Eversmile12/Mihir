Index,page_url,page_text
1,https://docs.alchemy.com/reference/starknet-api-quickstart,"To use the Starknet API you'll need to create a free Alchemy account first! 📘 NOTE Please note that Starknet support is currently in private beta. Introduction Starknet is a decentralized Validity-Rollup (often referred to as ZK-Rollup). It operates as a Layer 2 network over Ethereum, enabling any app to achieve massive scale without compromising Ethereum's composability and security. What is Starknet API? The Starknet API is a collection of JSON-RPC methods that allow developers to interact with the Starknet network. By using the endpoints provided by the API, developers can access up-to-date network data and submit transactions to it. Getting Started Instructions 1. Choose a Package Manager (npm or yarn) Before you begin, you'll need to choose a package manager to manage dependencies in your project. The two most popular package managers for Node.js are npm and yarn . You can choose the one you're most comfortable with. npm To get started with npm , follow the documentation to install Node.js and npm for your operating system: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm yarn To get started with yarn , follow these steps: https://classic.yarnpkg.com/lang/en/docs/install 2. Set up your project (npm or yarn) Let's start by setting up a simple Node.js project. Open your terminal and run the following commands: npm yarn mkdir alchemy-starknet-api cd alchemy-starknet-api npm init --yes mkdir alchemy-starknet-api cd alchemy-starknet-api yarn init --yes This will create a new directory called alchemy-starknet-api and initialize a new Node.js project in it."
2,https://docs.alchemy.com/reference/starknet-api-quickstart,"3. Make Your First Request To make requests to the Starknet API, you'll need to use an HTTP client. In this guide, we'll use Axios, a popular HTTP client for Node.js. Install Axios as a dependency in your project with the command below: npm yarn npm install axios yarn add axios Next, let's create a script that will make a request to the starknet_blockNumber JSON-RPC method on Starknet. Create a new file called index.js in your project directory and add the following code: index.js const axios = require('axios'); const apiKey = 'YOUR_API_KEY'; // Replace with your Alchemy API key const url = `https://starknet-mainnet.g.alchemy.com/v2/${apiKey}`; const payload = { jsonrpc: '2.0', id: 1, method: 'starknet_blockNumber', params: [] }; axios.post(url, payload) .then(response => { console.log('Block Number:', response.data.result); }) .catch(error => { console.error(error); }); Remember to replace YOUR_API_KEY with your actual Alchemy API key that you can get from your Alchemy dashboard . 4. Run Script To run the script and make the request to the Starknet API, execute the following command in your terminal: Shell node index.js As a result, should see the current block number on Starknet printed to the console! Shell Block Number: 42390 Next Steps Congratulations! You've successfully made your first request to the Starknet API using Alchemy. From here, you can explore the various JSON-RPC methods available on Starknet and start building your decentralized applications on it! ReadMe"
1,https://docs.alchemy.com/docs/sending-transactions,"Introduction In this section, you will find tutorials and resources for sending transactions on the blockchain. Transactions are a crucial aspect of the blockchain, and are used to transfer value, store data, and execute smart contracts. Tutorials The following tutorials are listed under this section: How to Send Transactions on Ethereum How to Send a Private Transaction on Ethereum How to Cancel a Transaction on Ethereum How to Check the Status of a Transaction using its Hash Updated 4 months ago ReadMe"
1,https://docs.alchemy.com/,"The web3 developer hub View API References, guides, and tutorials for Ethereum, Polygon, Optimism, Arbitrum, Solana and Astar. View docs NFT API docs... dive into resources Most popular NFT API Quickstart Easiest way to get NFT data from ownership to sales to metadata and more. Ethereum API Quickstart How to get started building on Ethereum and using the JSON-RPC API. SDK Quickstart The easiest way to connect your dApp to the blockchain using JavaScript. alchemy_pendingTransactions Subscribe to full transaction objects or hashes that are pending based on provided filters. What are payable functions in Solidity? Learn how payable functions work in Solidity. How to get all NFTs owned by an address Query all NFTs owned by a provided address in one line of code. Learn how to build in web3 Alchemy University Ethereum Developer Bootcamp and JavaScript Fundamentals Courses, for free. Create Web3 Dapp Create a full-stack dApp in ~4 mins, right from the command-line. View all tutorials Web3 tutorials for all topics: NFTs, Solidity, DeFI, transactions, and more! API references for all chains Including free Archive data on all chains and testnets. Ethereum Polygon PoS Arbitrum Optimism Solana Astar Polygon ZKEVM Starknet Use case APIs APIs built to optimize your code and make life as a developer way easier."
2,https://docs.alchemy.com/,"View all APIs NFT API Get all the NFT data you need with this suite of endpoints Transact Send transactions 7.9x faster Token API Get token valuable information to display to users Transfers API Get historical transactions for any address or contract Notify API Webhooks for transaction activity Trace API Deep insights for transaction processing Trusted by the best in the industry Community Driven Join the web3 developer community Get help with your product, meet other developers, and get access to a world-class community ReadMe"
1,https://docs.alchemy.com/discuss,"0 1 ANSWERED goerli getOwnersForToken problem. ContractAddress 0xf4910c763ed4e47a585e2d34baa9a4b611ae448c TokenID 105753309246923017705004118964412163901500988552969608451280480983076046897153 This token is owned by 0xe46A0dC2c63FF0165D96eb09C4aAf9909269B9f7. But getOwnersForToken returned nothing. This token minted using opensea. Is this only testnet problem? Could this happen on mainnet? Posted by haborym000 7 days ago 1 1 ANSWERED getnftsales-v2 api question: multiple tokenId For this endpoint <https://docs.alchemy.com/reference/getnftsales-v2> It currently accepts a single 'tokenId' parameter, can it changed to allow for multiple? Can be done if multiple tokenId's are separated with commas? Posted by Kush 8 days ago 1 1 ANSWERED Registration problem i have registration problem with google account. Showing that failed abuse check try another account or email address How can i fix this problem? Posted by Karthi c 9 days ago 1 2 ANSWERED Registration problem ! I tried registering on the site or logging in with my google e-mail address all day long. But things did not go well. No response from Discord or email. Is the company still operating? Or did you shut down the company? down the company? Posted by johann about 1 month ago 0 0 Collection Total Volume and other metadata Hello, I'm trying to get some collection metadata from alchemy, and I'm not sure if everything is retrievable via api. Metadata consists of the fields i'm seeing on a collection in opensea:"
2,https://docs.alchemy.com/discuss,"Total Volume, Floor Price, Best Offer, % listed, number of owners , % of unique owners, total supply, creator earnings % and category (like pfps, art etc) I managed to get a few of these: - `floor price`, `total supply` , by using the `/getContractMetadata` method - `number of owners`, by using `/getOwnersForCollection` - `% of unique owners` by using the `total supply` and the data from `/getOwnersForCollection` I'm not sure how to get the `Total Volume`, `Best Offer`, `% Listed`, `Creator Earnings %`, and the nft `Category` - are these obtainable somehow via the Alchemy API ? Posted by null about 1 month ago 1 2 ANSWERED Concurrent Transactions in Reinforced Transactions: Handling Nonce Clashes Do [Reinforced Transactions](https://docs.alchemy.com/reference/reinforced-transactions) support transactions sent concurrently? e.g. if I send transaction 1 and then transaction 2 (from the same sender address) before transaction 1 has been confirmed, will both be successfully confirmed or will there be nonce clashes? alchemy reinforced transactions nonce concurrent transactions Posted by Sahil about 2 months ago 1 2 ANSWERED Reinforced Transactions: ERC2771 Meta-Transactions and Trusted Forwarders Does [Reinforced Transactions](https://docs.alchemy.com/reference/reinforced-transactions) use [ERC2771](https://eips.ethereum.org/EIPS/eip-2771) meta-transactions using trusted forwarders?"
3,https://docs.alchemy.com/discuss,alchemy reinforced transactions erc2771 meta transactions Posted by Sahil about 2 months ago 1 2 ANSWERED Retrieving Old Apps After Joining a Team in Alchemy How can I retrieve my old apps once I join a team in Alchemy? alchemy accounts team Posted by Sahil about 2 months ago 1 2 ANSWERED Joining a Team with Your Alchemy Account: What to Expect What will happen if I join a team with my Alchemy account? alchemy accounts team Posted by Sahil about 2 months ago 1 2 ANSWERED Personal and Team Apps in a Single Alchemy Account Can personal apps and team apps exist in the same Alchemy account? alchemy accounts Posted by Sahil about 2 months ago FAQs Recent Unanswered 429 error account support account tier accounts address activity webhook alchemy alchemy api alchemy composer alchemy mempool alchemy sdk alchemy transact alchemy-sdk alchemy_getassettransfers archive data astar api capacity limits chains compute units concurrent transactions core cups defi enhanced api erc-20 token tutorial erc2771 erc721 error 429 eth transfers eth_getcode ethereum api events log gas estimation getassettransfers getblocknumber getcode getcontractmetadata getfloorprice getlogs getnft getnfts getnftsales getnftsforcollection getnftsforcontract getnftsforowner getnftsforowneriterator getownersforcollection getownersforcontract getprogramaccounts gettransaction gettransactionreceipt invalidatecontract ipfs gateway json-rpc meta transactions nft api nft cdn nft metadata nonce notify api polygon polygon api pricing rate limits reinforced transactions road to web3 sdk websockets endpoints smart contracts solana api solana websocket spam nfts subscription api team throughput transaction receipt api transactions transfer api transfers api video nft webhook webhooks websocket websockets ReadMe
1,https://docs.alchemy.com/reference/alchemy-sdk-quickstart,"The Alchemy SDK is the most comprehensive, stable, and powerful Javascript SDK available today to interact with the blockchain. It supports the exact same syntax and functionality of the Ethers.js AlchemyProvider and WebSocketProvider, making it a 1:1 mapping for anyone using the Ethers.js Provider. However, it adds a significant amount of improved functionality on top of Ethers, such as easy access to Alchemy’s Enhanced and NFT APIs, robust WebSockets, and quality-of life improvements such as automated retries. The SDK leverages Alchemy's hardened node infrastructure, guaranteeing best-in-class node reliability, scalability, and data correctness, and is undergoing active development by Alchemy's engineers. The SDK currently supports the following chains: Ethereum : Mainnet, Goerli Polygon : Mainnet, Mumbai Optimism : Mainnet, Goerli Arbitrum : Mainnet, Goerli Astar : Mainnet Getting started Check out the full Github repo here: github.com GitHub - alchemyplatform/alchemy-sdk-js 1. Install the SDK: NPM Yarn npm install alchemy-sdk yarn add alchemy-sdk 2. After installing the app, you can then import and use the SDK: SDK.js import { Network, Alchemy } from 'alchemy-sdk'; // Optional Config object, but defaults to demo api-key and eth-mainnet. const settings = { apiKey: 'demo', // Replace with your Alchemy API Key. network: Network. ETH_MAINNET, // Replace with your network."
2,https://docs.alchemy.com/reference/alchemy-sdk-quickstart,"}; const alchemy = new Alchemy(settings); 🚧 Creating a unique Alchemy API Key The public ""demo"" API key may be rate limited based on traffic. To create your own API key, sign up for an Alchemy account here and use the key created on your dashboard for the first app. The Alchemy object returned by new Alchemy() provides access to the Alchemy API. An optional config object can be passed in when initializing to set your API key, change the network, or specify the max number of retries. 3. Make requests using the Alchemy SDK: SDK.js import { Network, Alchemy } from 'alchemy-sdk'; // Optional Config object, but defaults to demo api-key and eth-mainnet. const settings = { apiKey: 'demo', // Replace with your Alchemy API Key. network: Network. ETH_MAINNET, // Replace with your network. }; const alchemy = new Alchemy(settings); // Access standard Ethers.js JSON-RPC node request alchemy.core.getBlockNumber().then(console.log); // Access Alchemy Enhanced API requests alchemy.core.getTokenBalances(""0x3f5CE5FBFe3E9af3971dD833D26bA9b5C936f0bE"").then(console.log); // Access the Alchemy NFT API alchemy.nft.getNftsForOwner('vitalik.eth').then(console.log); // Access WebSockets and Alchemy-specific WS methods alchemy.ws.on( { method: 'alchemy_pendingTransactions' }, res => console.log(res) ); ``` The Alchemy SDK currently supports five different namespaces, including: core : All commonly-used Ethers.js Provider methods and Alchemy Enhanced API methods nft : All Alchemy NFT API methods ws : All WebSockets methods transact : All Alchemy Transaction API methods notify : CRUD endpoints for modifying Alchemy Notify Webhooks"
3,https://docs.alchemy.com/reference/alchemy-sdk-quickstart,"If you are already using Ethers.js, you should be simply able to replace the Ethers.js Provider object with alchemy.core and it should just work. The Alchemy SDK also supports a number of Ethers.js objects that streamline the development process: Utils : Equivalent to ethers.utils , this provides a number of common Ethers.js utility methods for developers. Contract : An abstraction for smart contract code deployed to the blockchain. ContractFactory : Allows developers to build a Contract object. Wallet : An implementation of Signer that can sign transactions and messages using a private key as a standard Externally Owned Account. 📘 API Surface Overview If you're looking for more information about accessing any of the Alchemy SDK namespaces, objects, or specific implementation details, go to the link above! Alchemy SDK Example Requests 📘 Examples Using the Alchemy SDK You can find a long list of examples on how to use the SDK here. Getting the NFTs owned by an address SDK.js import { NftExcludeFilters, Alchemy } from 'alchemy-sdk'; const alchemy = new Alchemy(); // Get how many NFTs an address owns. alchemy.nft.getNftsForOwner('vitalik.eth').then(nfts => { console.log(nfts.totalCount); }); // Get all the image urls for all the NFTs an address owns. async function main() { for await (const nft of alchemy.nft.getNftsForOwnerIterator('vitalik.eth')) { console.log(nft.media); } } main(); // Filter out spam NFTs. alchemy.nft.getNftsForOwner('vitalik.eth', { excludeFilters:"
4,https://docs.alchemy.com/reference/alchemy-sdk-quickstart,"[NftExcludeFilters.SPAM] }).then(console.log); Getting all the owners of the BAYC NFT SDK.js import { Alchemy } from 'alchemy-sdk'; const alchemy = new Alchemy(); // Bored Ape Yacht Club contract address. const baycAddress = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'; async function main() { for await (const nft of alchemy.nft.getNftsForContractIterator(baycAddress, { // Omit the NFT metadata for smaller payloads. omitMetadata: true, })) { await alchemy.nft .getOwnersForNft(nft.contract.address, nft.tokenId) .then((response) => console.log(""owners:"", response.owners, ""tokenId:"", nft.tokenId) ); } } main(); Get all outbound transfers to a provided address ethers.js import { Alchemy } from 'alchemy-sdk'; const alchemy = new Alchemy(); alchemy.core.getTokenBalances('vitalik.eth').then( console.log ); Questions & Feedback 👍 Feature Requests We'd love your thoughts on what would improve your web3 dev process the most! If you have 5 minutes, tell us what you want at our Feature Request feedback form and we'd love to build it for you: Alchemy SDK Feedback Form If you have any questions, issues, or feedback, please file an issue on GitHub , or drop us a message on our Discord channel for the SDK. ReadMe"
1,https://docs.alchemy.com/docs/tutorials-overview,"🚀 Getting Started Learn how to get started with Alchemy and set up core web3 development tools. As a bonus also learn about the development best practices. Alchemy Quickstart Guide How to Set Up Core Web3 Developer Tools Developer Best Practices 💳 Wallet Set Up The first thing you need for web3 development is a web3 wallet. Learn how to set up a web3 wallet and supercharge it by adding an Alchemy RPC endpoint to it! How to Install a Web3 Wallet How to Add Alchemy RPC Endpoints to Metamask ✨ Alchemy University Alchemy University is the ultimate ecosystem for learning how to build and interact with web3. Our goal is to teach you everything you need to know to start building in web3, from hands on, comprehensive bootcamps to starter code that expedites your workflow. Check out the learning paths below: JavaScript Fundamentals Ethereum Developer Bootcamp Road to Web3 Starter code ✍️ Creating Smart Contracts Learn how to create smart contracts from scratch on blockchains such as Ethereum, Solana and Arbitrum. Hello World Smart Contract Hello World Solana Program NFT Minter Tutorial: How to Create a Full Stack DApp How to Create an NFT on Ethereum Tutorial Arbitrum NFTs: Creating and Deploying ERC-721 How to Build a Solana NFT Collection 🎨 NFTs In this series of tutorials, you will learn everything you need to know about NFTs, for example, airdropping nfts, using Alchemy's NFT API, creating on-chain and off-chain NFT allowlists, creating token gated communities and much more! NFT Project Code Templates NFT API Creating NFT Allowlists"
2,https://docs.alchemy.com/docs/tutorials-overview,"NFT Transactions 💰 DeFi This section is full of knowledge about DeFi, from working with ERC-20 tokens to running ETH 2.0 staking node with Alchemy. We got you covered! ERC-20 Tokens Token Balances Running an Eth2.0 Staking Node or Validator with Alchemy 💸 Transactions Transactions are the most important aspect of blockchains, pretty much everything is done through transactions, from sending the cryptocurrencies to interacting with the smart contracts. In this section you will learn how to send transactions, get transaction history, query transaction data and much more! Understanding Transactions Sending Transactions Transaction History On-chain Events 📣 Streaming Data Learn how to use Alchemy webhooks to stream real-time data. You will learn how to integrate Alchemy webhooks with zapier, creating whale alerts and sending real-time transaction notifications to dapps. How to Integrate Alchemy Webhooks with Zapier How to Get Notifications for NFT Contract Creations in Three Simple Steps How to Create Whale Alert Bots Transaction Notifications WebSocket Subscriptions Custom Webhooks Tutorials 👾 Diving Deeper into Solidity Dive deeper into Solidity concepts and learn about smart contract storage layout, interpreting binaries in solidity and verifying a message signature on Ethereum. What is Smart Contract Storage Layout? What are Payable Functions in Solidity? How to Interpret Binaries in Solidity How to Verify a Message Signature on Ethereum 🖥 Understanding the EVM Explore the EVM from the inside out, learn about archive data, uncle blocks, upgrading Ethereum nodes, Ethereum miner rewards, EIP-1559 and deploying a contract to the same address on multiple networks! How to Get the Latest Block on Ethereum What are Uncle Blocks? What is Archive Data on Ethereum?"
3,https://docs.alchemy.com/docs/tutorials-overview,"Internal Playbook: Upgrading Ethereum Nodes How to Calculate Ethereum Miner Rewards EIP-1559 Resource and Tutorial Hub How to Deploy a Contract to the Same Address on Multiple Networks Web3 Glossary Blockchain 101 🛠SDKs and Libraries Learn how to work with libraries such as Ethers.js and Web3.js. Ethers.js vs Web3.js SDK Comparison What is Ethers.js? How to Fork Ethereum Mainnet 🖼️ Frontend Tutorials Learn how to build beautiful web3 dapps with our front-end tutorials! How to Build ""Buy Me a Coffee"" DeFi dapp How to Create an NFT Gallery How to Build a Staking Dapp How to Build an NFT Marketplace from Scratch How to Build a Token Swap Dapp With 0x API How to Create a Decentralized Twitter with Lens Protocol NFT Minter Tutorial: How to Create a Full Stack DApp How to Build a Solana NFT Collection Integrating Historical Transaction Data into your dApp Building a dApp with Real-Time Transaction Notifications How to Create a Signature Generator DApp 👯‍♀️ Community Tutorials Learn from awesome writers in the web3 space. Click here to learn from community contributors or just click on the next page below! Updated 15 days ago ReadMe"
1,https://docs.alchemy.com/reference/enhanced-apis-overview,"Access the blockchain like never before with Alchemy's continually expanding Enhanced API suite , and web3 developer tools! Query NFTs by the user, trace transactions, get real-time notifications in your dApp, debug smart contracts faster, and do more with Alchemy's supported endpoints. NFT API Alchemy's NFT API allows you to quickly get all the information you need to know about NFTs from the blockchain including Ethereum and Polygon. Rather than searching, indexing, and storing data yourself - you can now make one request to fetch specific NFT information for both ERC-721 and ERC-1155 tokens , like: All NFTs owned by an address Metadata and attributes for a specific NFT token NFT API Tutorials How to Resolve ENS Domains Given a Wallet Address Transfers API Endpoints Transfers are a representation of value being exchanged between two accounts, and sometimes users wish to see the historical transactions associated with a specific account or address. Getting historical transactions is currently an extremely challenging and inefficient task, requiring users to scan the entire blockchain and index everything to search for transactions associated with the desired address. With the Transfers API, users can query all historical transactions for an address in one request! Transfers API Tutorials How to Get Transaction History for an Address on Ethereum How to get historical transactions on Polygon How to Get All NFTs Owned by an Address How to Get NFTs Minted by an Address Transaction Receipts API Fetch all transaction receipts for a block number or a block hash in one API call using the alchemy_getTransactionReceipts method - for mainnet and testnets on Ethereum, Polygon, Optimism, and Arbitrum."
2,https://docs.alchemy.com/reference/enhanced-apis-overview,"The Transaction Receipts API uses less Compute Units (CUs) then batching all the eth_getTransactionReceipt calls for each transaction hash - saving you on compute cost. Token API Easily request information on specific tokens such as metadata or balances . Alchemy currently supports the following endpoints: alchemy_getTokenAllowance - returns the amount the spender is allowed to withdraw from the owner. alchemy_getTokenBalances - returns token balances for a specific address given a list of contracts. alchemy_getTokenMetadata - returns metadata (name, symbol, decimals, logo) for a given token contract address. Token API Tutorials How to Get Token Metadata How to Get Token Balance for an Address Notify API Alchemy provides a set of webhooks for tracking address activity, mined transactions, dropped transactions, and gas prices on several blockchains. Developers can manually create webhooks from within the dashboard, or programmatically create webhooks to track activity for 10+ addresses using the Notify API. Notify API Tutorials Notify API Quickstart How to Integrate Alchemy Webhooks with Zapier Building a dApp with Real-Time Transaction Notifications Trace API Endpoints Trace API methods give developers access to the most detailed information about on-chain activity, and allow users to get a full externality trace on any transaction executed on Ethereum. Unlike the log filtering API, you are able to search and filter based only upon address information. Information returned includes the execution of all CREATE, SUICIDE and all variants of CALL together with input data, output data, gas usage, the amount transferred, and the success status of each individual action."
3,https://docs.alchemy.com/reference/enhanced-apis-overview,"Subscription API Alchemy allows you to subscribe for push updates via Websockets on a variety of real-time alerts, such as pending transactions, log events, new blocks and more! Subscription API Tutorials How to Listen to NFT Mints ReadMe"
1,https://docs.alchemy.com/reference/notify-api-quickstart,"Alchemy Notify is used to subscribe to event notifications that occur on your application. You create a webhook to receive notifications on different types of on-chain activity. Here are a few quick-links: Webhook Types How to Set up Webhooks Don’t have an API key? Sign up or upgrade your plan for access. Get started for free Notify webhook types Below are the Alchemy webhook types and their supported networks. Webhook Type Description Network Custom Webhooks Custom Webhooks allows you to track any smart contract or marketplace activity, monitor any contract creation, or any other on-chain interaction. This gives you infinite data access with precise filter controls to get the blockchain data you need. All Mined Transaction The Mined Transaction webhook notifies your app when a transaction sent through your app (using your API key) gets mined. This is useful for you to further notify the users of your app about the status of the transaction. All Dropped Transactions The Dropped Transaction webhook notifies your app when a transaction sent through your app (using your API key) gets dropped. This is useful for you to further notify the users of your app about the status of the transaction. All Address Activity Alchemy's Address Activity webhook tracks all ETH, ERC20, ERC721 and ERC1155 transfers. This provides your app with real-time state changes when an address sends/receives tokens or ETH. You can specify the addresses for which you want to track this activity. A maximum of 50,000 addresses can be added to a single webhook."
2,https://docs.alchemy.com/reference/notify-api-quickstart,"All NFT Activity The NFT Activity webhook allows you to track ERC721 and ERC1155 token contracts. This provides your app with real-time state changes when an NFT is transferred between addresses. Ethereum, Polygon, Optimism, and Arbitrum NFT Meta Updates The NFT Metadata Updates webhook allows you to track metadata updates for ERC721 and ERC1155 token contracts for Ethereum and Polygon NFTs. This notifies your app when the metadata for an NFT is updated. Ethereum Mainnet & Goerli; Polygon Mainnet & Mumbai V2 Webhook Field definitions Field Description Value webhookId Unique ID of the webhook destination. wh_octjglnywaupz6th id ID of the event. whevt_ogrc5v64myey69ux createdAt The timestamp when webhook was created. 2021-12-07T03:52:45.899Z type Webhook event type. TYPE_STRING event Object-mined transaction. OBJECT Example V2 { ""webhookId"": ""wh_octjglnywaupz6th"", ""id"": ""whevt_ogrc5v64myey69ux"", ""createdAt"": ""2021-12-07T03:52:45.899Z"", ""type"": TYPE_STRING, ""event"": OBJECT } V1 Webhook Event Object Field definitions Field Description Value app Alchemy app name sending the transaction webhook. Demo network Network for the webhook event. MAINNET webhookType The type of webhook. MINED_TRANSACTION timestamp Timestamp when the webhook was created. 2020-07-29T00:29:18.414Z event name Webhook event type. OBJECT For Notify full dependencies and more code examples, go to the GitHub repo ."
3,https://docs.alchemy.com/reference/notify-api-quickstart,"Example Response v1 { ""app"": ""Demo"", ""network"": ""MAINNET"", ""webhookType"": ""MINED_TRANSACTION"", ""timestamp"": ""2020-07-29T00:29:18.414Z"", ""event name"": OBJECT } How to set-up webhooks Setting up a webhook is as simple as adding a new URL to your application. ❗️ NOTE: If you need to add over 10 addresses to the address activity webhook, we recommend adding them through an API call. Set-up webhooks in your dashboard Navigate to the Notify tab in your Alchemy Dashboard . Determine which type of webhook you want to activate. Click the Create Webhook button. Select the app to add the webhook notifications. Add in your unique webhook URL. This is the link to receive requests. The webhook payload might not always be compatible for 3rd party integrations. Test your webhook by clicking the Test Webhook button. Click Create Webhook and your webhook appears in the list. Check your endpoint to see responses. Set-up webhooks programmatically Use the create-webhook endpoint: https://docs.alchemy.com/reference/create-webhook . Webhook IP addresses As an added security measure, you can ensure your webhook notification originates from Alchemy by using one of the following IP addresses: 54.236.136.17 34.237.24.169 Create webhook listeners Webhook listeners receive requests and process event data. The listener responds to the Alchemy server with a 200 status code once you've successfully received the webhook event. Your webhook listener can be a simple server or Slack integration to receive the webhook listener data."
4,https://docs.alchemy.com/reference/notify-api-quickstart,"After setting up the webhooks in your Alchemy dashboard (or programmatically) use the starter code in JavaScript, Python, Go, and Rust below. Here's the GitHub repository for the entire code. JavaScript Python Go Rust import express from ""express""; import { getRequiredEnvVar, setDefaultEnvVar } from ""./envHelpers""; import { addAlchemyContextToRequest, validateAlchemySignature, AlchemyWebhookEvent, } from ""./webhooksUtil""; async function main(): Promise<void> { const app = express(); setDefaultEnvVar(""PORT"", ""8080""); setDefaultEnvVar(""HOST"", ""127.0.0.1""); setDefaultEnvVar(""SIGNING_KEY"", ""whsec_test""); const port = +getRequiredEnvVar(""PORT""); const host = getRequiredEnvVar(""HOST""); const signingKey = getRequiredEnvVar(""SIGNING_KEY""); // Middleware needed to validate the alchemy signature app.use( express.json({ verify: addAlchemyContextToRequest, }) ); app.use(validateAlchemySignature(signingKey)); // Register handler for Alchemy Notify webhook events // TODO: update to your own webhook path app.post(""/webhook-path"", (req, res) => { const webhookEvent = req.body as AlchemyWebhookEvent; // Do stuff with with webhook event here!"
5,https://docs.alchemy.com/reference/notify-api-quickstart,"console.log(`Processing webhook event id: ${webhookEvent.id}`); // Be sure to respond with 200 when you successfully process the event res.send(""Alchemy Notify is the best!""); }); // Listen to Alchemy Notify webhook events app.listen(port, host, () => { console.log(`Example Alchemy Notify app listening at ${host}:${port}`); }); } main(); import hmac import hashlib from django.core.exceptions import PermissionDenied from webhook_server.settings import SIGNING_KEY import json from types import SimpleNamespace def is_valid_signature_for_string_body( body: str, signature: str, signing_key: str ) -> bool: digest = hmac.new( bytes(signing_key, ""utf-8""), msg=bytes(body, ""utf-8""), digestmod=hashlib.sha256, ).hexdigest() return signature == digest class AlchemyWebhookEvent: def __init__(self, webhookId, id, createdAt, type, event): self.webhook_id = webhookId self.id = id self.created_at = createdAt self.type = type self.event = event class AlchemyRequestHandlerMiddleware: def __init__(self, get_response): self.get_response = get_response def __call__(self, request): str_body = str(request.body, request.encoding or ""utf-8"") signature = request.headers[""x-alchemy-signature""] if not is_valid_signature_for_string_body(str_body, signature, SIGNING_KEY): raise PermissionDenied(""Signature validation failed, unauthorized!"")"
6,https://docs.alchemy.com/reference/notify-api-quickstart,"webhook_event = json.loads(str_body) request.alchemy_webhook_event = AlchemyWebhookEvent(**webhook_event) response = self.get_response(request) return response package notify import ( ""crypto/hmac"" ""crypto/sha256"" ""encoding/hex"" ""encoding/json"" ""io/ioutil"" ""log"" ""net/http"" ""time"" ) type AlchemyWebhookEvent struct { WebhookId string Id string CreatedAt time. Time Type string Event map[string]interface{} } func jsonToAlchemyWebhookEvent(body []byte) (*AlchemyWebhookEvent, error) { event := new(AlchemyWebhookEvent) if err := json. Unmarshal(body, &event); err ! = nil { return nil, err } return event, nil } // Middleware helpers for handling an Alchemy Notify webhook request type AlchemyRequestHandler func(http. ResponseWriter, *http. Request, *AlchemyWebhookEvent) type AlchemyRequestHandlerMiddleware struct { handler AlchemyRequestHandler signingKey string } func NewAlchemyRequestHandlerMiddleware(handler AlchemyRequestHandler, signingKey string) *AlchemyRequestHandlerMiddleware { return &AlchemyRequestHandlerMiddleware{handler, signingKey} } func isValidSignatureForStringBody( body []byte, signature string, signingKey []byte, ) bool { h := hmac. New(sha256.New, signingKey) h.Write([]byte(body)) digest := hex. EncodeToString(h. Sum(nil)) return digest == signature } func (arh *AlchemyRequestHandlerMiddleware) ServeHTTP(w http. ResponseWriter, r *http. Request) { signature := r.Header. Get(""x-alchemy-signature"") body, err := ioutil. ReadAll(r. Body) if err ! = nil { http. Error(w, err. Error(), http.StatusInternalServerError) log.Panic(err) return } r.Body."
7,https://docs.alchemy.com/reference/notify-api-quickstart,"Close() isValidSignature := isValidSignatureForStringBody(body, signature, []byte(arh.signingKey)) if !isValidSignature { errMsg := ""Signature validation failed, unauthorized!"" http. Error(w, errMsg, http. StatusForbidden) log.Panic(errMsg) return } event, err := jsonToAlchemyWebhookEvent(body) if err ! = nil { http. Error(w, err. Error(), http. StatusBadRequest) log.Panic(err) return } arh.handler(w, r, event) } use chrono::{DateTime, FixedOffset}; use hex; use hmac::{Hmac, Mac}; use sha2::Sha256; use std::{ future::{ready, Ready}, rc::Rc, }; use serde::{de, Deserialize, Deserializer}; use actix_web::{ dev::{self, Service, ServiceRequest, ServiceResponse, Transform}, error::ErrorBadRequest, error::ErrorUnauthorized, web::BytesMut, Error, HttpMessage, }; use futures_util::{future::LocalBoxFuture, stream::StreamExt}; #[derive(Deserialize)] #[serde(rename_all = ""camelCase"")] pub struct AlchemyWebhookEvent { pub webhook_id: String, pub id: String, #[serde(deserialize_with = ""deserialize_date_time"")] pub created_at: DateTime<FixedOffset>, #[serde(rename = ""type"")] pub webhook_type: String, pub event: serde_json::Value, } fn deserialize_date_time<'a, D>(deserializer: D) -> Result< DateTime<FixedOffset>, D::Error> where D: Deserializer<'a>, { let date_time_string: String = Deserialize::deserialize(deserializer)?; let date_time = DateTime::<FixedOffset>::parse_from_rfc3339(&date_time_string) .map_err(|e|"
8,https://docs.alchemy.com/reference/notify-api-quickstart,"de::Error::custom(e.to_string()))?; Ok(date_time) } fn is_valid_signature_for_string_body( body: &[u8], signature: &str, signing_key: &str, ) -> Result<bool, Box<dyn std::error::Error>> { let signing_key_bytes: Vec<u8> = signing_key.bytes().collect(); let mut mac = Hmac::<Sha256>::new_from_slice(&signing_key_bytes)?; mac.update(&body); let hex_decode_signature = hex::decode(signature)?; let verification = mac.verify_slice(&hex_decode_signature).is_ok(); Ok(verification) } pub struct AlchemyRequestHandlerMiddleware<S> { signing_key: String, service: Rc<S>, } impl<S, B> Service<ServiceRequest> for AlchemyRequestHandlerMiddleware<S> where S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static, S::Future: 'static, B: 'static, { type Response = ServiceResponse<B>; type Error = Error; type Future = LocalBoxFuture<'static, Result<Self::Response, Self::Error>>; dev::forward_ready!(service); fn call(&self, mut req: ServiceRequest) -> Self::Future { let svc = self.service.clone(); let signing_key = self.signing_key.clone(); Box::pin(async move { let mut body = BytesMut::new(); let mut stream = req.take_payload(); while let Some(chunk) = stream.next().await { body.extend_from_slice(&chunk?); } let signature = req .headers() .get(""x-alchemy-signature"") .ok_or(ErrorBadRequest ( ""Signature validation failed, missing x-alchemy-signature header!"", ))? .to_str() .map_err(|_| { ErrorBadRequest( ""Signature validation failed, x-alchemy-signature header is not a string!"", ) })?"
9,https://docs.alchemy.com/reference/notify-api-quickstart,"; let is_valid_signature = is_valid_signature_for_string_body(&body, signature, &signing_key)? ; if !is_valid_signature { return Err(ErrorUnauthorized( ""Signature validation failed, signature and body do not match!"", )); } let webhook: AlchemyWebhookEvent = serde_json::from_slice(&body).map_err(|_| { ErrorBadRequest(""Bad format, body could not be mapped to AlchemyWebhookEvent"") })?; req.extensions_mut() .insert::<Rc<AlchemyWebhookEvent>>(Rc::new(webhook)); let res = svc.call(req).await?; Ok(res) }) } } pub struct AlchemyRequestHandlerMiddlewareFactory { signing_key: String, } impl AlchemyRequestHandlerMiddlewareFactory { pub fn new(signing_key: String) -> Self { AlchemyRequestHandlerMiddlewareFactory { signing_key } } } impl<S, B> Transform<S, ServiceRequest> for AlchemyRequestHandlerMiddlewareFactory where B: 'static, S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static, { type Response = ServiceResponse<B>; type Error = Error; type Transform = AlchemyRequestHandlerMiddleware<S>; type InitError = (); type Future = Ready<Result<Self::Transform, Self::InitError>>; fn new_transform(&self, service: S) -> Self::Future { ready(Ok(AlchemyRequestHandlerMiddleware { signing_key: self.signing_key.clone(), service: Rc::new(service), })) } } Test webhooks with Ngrok Sign-up for a free Ngrok account . Install Ngrok using the Ngrok guide . On macOS run brew install ngrok . Connect your Ngrok account by running ngrok authtoken YOUR_AUTH_TOKEN . Start your local forwarding tunnel: ngrok http 80 . Once you have a URL to test your webhook (in this case https://461a-199-116-73-171.ngrok.io pictured above), follow the steps below: Navigate to your Notify dashboard ."
10,https://docs.alchemy.com/reference/notify-api-quickstart,"Click Create Webhook on the webhook you want to test. Paste your unique URL and hit the Test Webhook button. You'll see the webhooks here: http://localhost:4040/inspect/http . Webhook signature & security To make your webhooks secure, you can verify that they originated from Alchemy by generating a HMAC SHA-256 hash code using your unique webhook signing key. Find your signing key Navigate to the Notify page in your dashboard. Next, click on the three dots of the webhook you want to get the signature for and copy the Signing Key. Validate the signature received Every outbound request contains a hashed authentication signature in the header. It's computed by concatenating your signing key and request body. Then generates a hash using the HMAC SHA256 hash algorithm. To verify the signature came from Alchemy, you generate the HMAC SHA256 hash and compare it with the signature received. Example request header Request header POST /yourWebhookServer/push HTTP/1.1 Content-Type: application/json; x-alchemy-signature: your-hashed-signature Example signature validation JavaScript Python Go Rust import * as crypto from ""crypto""; function isValidSignatureForStringBody( body: string, // must be raw string body, not json transformed version of the body signature: string, // your ""x-alchemy-signature"" from header signingKey: string, // taken from dashboard for specific webhook ): boolean { const hmac = crypto.createHmac(""sha256"", signingKey); // Create a HMAC SHA256 hash using the signing key hmac.update(body, ""utf8""); //"
11,https://docs.alchemy.com/reference/notify-api-quickstart,"Update the token hash with the request body using utf8 const digest = hmac.digest(""hex""); return signature === digest; } import hmac import hashlib def isValidSignatureForStringBody(body: str, signature: str, signing_key: str)->bool: digest = hmac.new( bytes(signing_key, ""utf-8""), msg=bytes(body, ""utf-8""), digestmod=hashlib.sha256, ).hexdigest() return signature == digest func isValidSignatureForStringBody( body []byte, // must be raw string body, not json transformed version of the body signature string, // your ""X-Alchemy-Signature"" from header signingKey []byte, // taken from dashboard for specific webhook ) bool { h := hmac. New(sha256.New, signingKey) h.Write([]byte(body)) digest := hex. EncodeToString(h. Sum(nil)) return digest == signature } fn is_valid_signature_for_string_body( body: &[u8], // must be raw string body, not json transformed version of the body signature: &str, // your ""X-Alchemy-Signature"" from header signing_key: &str, // taken from dashboard for specific webhook ) - > Result<bool, Box<dyn std::error::Error>> { let signing_key_bytes: Vec<u8> = signing_key.bytes().collect(); let mut mac = Hmac::<Sha256>::new_from_slice(&signing_key_bytes)?; mac.update(&body); let hex_decode_signature = hex::decode(signature)?; let verification = mac.verify_slice(&hex_decode_signature).is_ok(); Ok(verification) } Webhook retry logic Alchemy Notify V2 has built-in retry-logic for webhooks. Requests are retried for non-200 response codes in failures to reach your server."
12,https://docs.alchemy.com/reference/notify-api-quickstart,Requests are retried up to 6 times before failing. Below are the request retry intervals. 15 seconds 1 minute 10 minutes 1 hour 1 day ReadMe
1,https://docs.alchemy.com/reference/token-api-quickstart,"With the Token API, you can easily request information on specific tokens such as metadata or balances. Alchemy currently supports the following Token API Endpoints : alchemy_getTokenAllowance : Returns the amount which the sender is allowed to withdraw from the owner. alchemy_getTokenBalances : Returns ERC20 token balances for all tokens the given address has ever transacted in with. Optionally accepts a list of contracts. alchemy_getTokenMetadata : Returns metadata (name, symbol, decimals, logo) for a given token contract address. 📘 Decoded values Unless otherwise specified, Alchemy methods will return decoded values in their responses (e.g., for token decimals, 18 will be returned instead of ""0x12"") to save you the extra step of decoding the value yourself ✅ For this JavaScript quickstart guide, we recommend using the Alchemy SDK , a library that allows you to more easily interact with Alchemy APIs. The Alchemy SDK also gives you WebSocket support and other benefits right out of the box! Fetch or Axios are two alternative modules that also allow you to make HTTP requests. Common setup steps If you're new to the Alchemy Quickstart series, you should start with these steps before choosing any of the modules below. If you're a returning dev, go ahead and skip. Choose a package manager (npm or yarn) For this guide we will be using npm or yarn as our package manager to install either alchemy-web3 , fetch , or axios . npm To get started with npm , follow the documentation to install Node.js and npm for your operating system: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm yarn To get started with yarn , follow these steps: https://classic.yarnpkg.com/lang/en/docs/install"
2,https://docs.alchemy.com/reference/token-api-quickstart,"Set up your repo (npm or yarn) npm Open up a terminal, and from the command line, create a new repository to hold your quickstart scripts. We'll also initialize the repo as an npm project. npm mkdir alchemy-token-api cd alchemy-token-api npm init --yes yarn yarn mkdir alchemy-token-api cd alchemy-token-api yarn init --yes Support import syntax Since we'll be using import syntax to load ES6 modules, add 'type': 'module' to your package.json file: package.json // package.json { ... ""type"": ""module"" } See this discussion for more context: https://stackoverflow.com/questions/61401475/why-is-type-module-in-package-json-file How to Query the Token API Alchemy SDK (Recommended) You can install the alchemy-sdk module to easily interact with Alchemy APIs. We highly recommend using the alchemy-sdk because you also get WebSocket support, retries, and other benefits without the complexity! For full documentation on alchemy-sdk , check the github repo: https://github.com/alchemyplatform/alchemy-sdk-js Installation Run the following command to install alchemy-sdk with npm or yarn npm yarn npm install alchemy-sdk yarn add alchemy-sdk Usage github.com token-api-javascript-scripts/alchemy-web3-script.js at main · alchemyplatform/token-api-javascript-scripts Shell touch alchemy-sdk-script.js And then paste the following code snippet into the file: alchemy-sdk-script.js import { Alchemy, Network } from ""alchemy-sdk""; const settings = { apiKey: ""demo"", // Replace with your Alchemy API Key. network: Network. ETH_MAINNET, // Replace with your network."
3,https://docs.alchemy.com/reference/token-api-quickstart,"}; const alchemy = new Alchemy(settings); // The wallet address / token we want to query for: const ownerAddr = ""0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be""; const balances = await alchemy.core.getTokenBalances(ownerAddr, [ ""0x607f4c5bb672230e8672085532f7e901544a7375"", ]); // The token address we want to query for metadata: const metadata = await alchemy.core.getTokenMetadata( ""0x607f4c5bb672230e8672085532f7e901544a7375"" ); console.log(""Token Balances:""); console.log(balances); console.log(""Token Metadata: ""); console.log(metadata); From your command line, you can execute the script with: Shell node alchemy-sdk-script.js You should see output like this: Shell Token Balances: { address: '0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be', tokenBalances: [ { contractAddress: '0x607f4c5bb672230e8672085532f7e901544a7375', tokenBalance: '0x0000000000000000000000000000000000000000000000000000000000000000', error: null } ] } Token Metadata: { decimals: 9, logo: 'https://static.alchemyapi.com/images/assets/1637.png', name: 'iExec RLC', symbol: 'RLC' } Node Fetch node-fetch is a lightweight, common module that brings the Fetch API to Node.js and allows us to make our HTTP requests."
4,https://docs.alchemy.com/reference/token-api-quickstart,"See the documentation for more info: https://www.npmjs.com/package/node-fetch Installation Run the following command to install node-fetch with npm or yarn npm yarn npm install node-fetch yarn add node-fetch Usage github.com token-api-javascript-scripts/fetch-script.js at main · alchemyplatform/token-api-javascript-scripts Shell touch fetch-script.js and then paste the following code snippet into the file to explore the getNFTs method:= fetch-script.js // alchemy-token-api/fetch-script.js import fetch from 'node-fetch'; // Replace with your Alchemy API key: const apiKey = ""demo""; const fetchURL = `https://eth-mainnet.g.alchemy.com/v2/${apiKey}`; // Replace with the wallet address you want to query: const ownerAddr = ""0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be""; // Replace with the token contract address you want to query: const tokenAddr = ""0x607f4c5bb672230e8672085532f7e901544a7375""; var raw = JSON.stringify({ ""jsonrpc"": ""2.0"", ""method"": ""alchemy_getTokenBalances"", ""headers"": { ""Content-Type"": ""application/json"" }, ""params"": [ `${ownerAddr}`, [ `${tokenAddr}`, ] ], ""id"": 42 }); var requestOptions = { method: 'POST', body: raw, redirect: 'follow' }; // Make the request and print the formatted response: fetch(fetchURL, requestOptions) .then(response => response.json()) .then(response => JSON.stringify(response, null, 2)) .then(result => console.log(result)) .catch(error"
5,https://docs.alchemy.com/reference/token-api-quickstart,"=> console.log('error', error)); From your command line, you can execute the script with: Shell node fetch-script.js Your output should look like the following: JSON { ""jsonrpc"": ""2.0"", ""id"": 42, ""result"": { ""address"": ""0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be"", ""tokenBalances"": [ { ""contractAddress"": ""0x607f4c5bb672230e8672085532f7e901544a7375"", ""tokenBalance"": ""0x00000000000000000000000000000000000000000000000000003c005f81ab00"", ""error"": null } ] } } For full documentation on the NFT API getNFTs method, check out the docs: docs.alchemy.com Token API Axios axios is a promise-based HTTP client for the browser and Node.js, which allows us to make a raw request to the Alchemy API. See the documentation for more info: https://www.npmjs.com/package/axios Installation Run the following command to install axios with npm and yarn npm yarn npm install axios yarn add axios Usage github.com token-api-javascript-scripts/axios-script.js at main · alchemyplatform/token-api-javascript-scripts Shell touch axios-script.js and then paste the following code snippet in to explore the getNFTs method axios-script.js // alchemy-token-api/axios-script.js import axios from 'axios'; // Replace with your Alchemy API key: const apiKey = ""demo""; const baseURL = `https://eth-mainnet.g.alchemy.com/v2/${apiKey}`; // Replace with the wallet address you want to query: const ownerAddr = ""0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be""; // Replace with the token contract address you want to query: const"
6,https://docs.alchemy.com/reference/token-api-quickstart,"tokenAddr = ""0x607f4c5bb672230e8672085532f7e901544a7375""; var data = JSON.stringify({ ""jsonrpc"": ""2.0"", ""method"": ""alchemy_getTokenBalances"", ""params"": [ `${ownerAddr}`, [ `${tokenAddr}` ] ], ""id"": 42 }); var config = { method: 'post', url: baseURL, headers: { 'Content-Type': 'application/json' }, data : data }; axios(config) .then(function (response) { console.log(JSON.stringify(response.data, null, 2)) }) .catch(function (error) { console.log(error); }); From your command line, you can execute the script with: JavaScript node axios-script.js Your output should look like the following: Shell alchemy-token-api % node axios-script.js { ""jsonrpc"": ""2.0"", ""id"": 42, ""result"": { ""address"": ""0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be"", ""tokenBalances"": [ { ""contractAddress"": ""0x607f4c5bb672230e8672085532f7e901544a7375"", ""tokenBalance"": ""0x00000000000000000000000000000000000000000000000000003c005f81ab00"", ""error"": null } ] } } For full documentation on the available Token API methods, check out the docs: docs.alchemy.com Token API docs.alchemy.com Token API ReadMe"
1,https://docs.alchemy.com/reference/polygon-api-quickstart,"Don’t have an API key? Sign up to start building on Polygon Get started for free Getting Started Instructions 1. Choose a package manager (npm or yarn) For this guide, we will be using npm or yarn as our package manager to install either alchemy-sdk or any other packages. npm To get started with npm , follow the documentation to install Node.js and npm for your operating system: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm yarn To get started with yarn , follow these steps: https://classic.yarnpkg.com/lang/en/docs/install 2. Set up your project (npm or yarn) Shell (npm) Shell (yarn) mkdir alchemy-polygon-api cd alchemy-polygon-api npm init --yes mkdir alchemy-polygon-api cd alchemy-polygon-api yarn init --yes 3. Install Alchemy-SDK Run the following command to install the Alchemy SDK with npm or yarn. npm yarn npm install alchemy-sdk yarn add alchemy-sdk 4. Make your first request You are all set now to use Polygon PoS API and make your first request. For instance, lets make a request to get latest block . Create an index.js file and paste the following code snippet into the file. index.js const { Network, Alchemy } = require(""alchemy-sdk""); // Optional Config object, but defaults to demo api-key and eth-mainnet. const settings = { apiKey: ""demo"", // Replace with your Alchemy API Key. network: Network.MATIC_MAINNET, // Replace with your network."
2,https://docs.alchemy.com/reference/polygon-api-quickstart,"}; const alchemy = new Alchemy(settings); async function main() { const latestBlock = await alchemy.core.getBlockNumber(); console.log(""The latest block number is"", latestBlock); } main(); 5. Run script To run the above node script, use cmd node index.js , and you should see the output. shell The latest block number is 36250231 Polygon Tutorials You must not stop here! Want to build your first Dapp on Polygon and use Polygon APIs? Check out the following tutorials to learn how to build on Polygon: How to Code and Deploy a Polygon Smart Contract Polygon SDK Examples Polygon API FAQ How to Add Polygon to Metamask For full documentation on the available endpoints for alchemy-sdk, check the github repo: github.com GitHub - alchemyplatform/alchemy-sdk-js: The easiest way to connect your dApp to the blockchain. ReadMe"
1,https://docs.alchemy.com/reference/transact-api-quickstart,"To use Alchemy Transact you'll need to create a free Alchemy account first ! The Alchemy Transact product suite includes APIs and enhanced functionality to make your transactions cheaper, faster, safer and more reliable. 1. Reinforced Transactions Reinforced Transactions increase transaction durability and robustness, reducing time to mine by 7.9x and reducing drop rate by 46.2% during periods of high network congestion. Behind the scenes, each Reinforced Transaction initiates a sentry that manages the transaction lifecycle and continually broadcasts transactions across multiple geographically distributed nodes, re-submitting them to several mempools if it detects transactions are getting dropped. This ultimately increases the speed and reliability with which transactions are included in new blocks. You can learn more about how Reinforced Transactions work on the Reinforced Transactions page . Get started Reinforced Transactions are available to Growth and Enterprise teams. Sign up for an account or upgrade to growth tier to get started. Existing growth or enterprise users can enable Reinforced Transactions by clicking ""Edit App"" on their individual app page from the dashboard . 2. Private Transactions The Private Transactions endpoints are a way to send and cancel transactions without exposing them to the public mempool, preventing unwanted arbitrage and frontrunning via Flashbots' private transaction relays. Get started The Private Transactions endpoints are available for all Alchemy customers. Just create a free Alchemy account , and check out the documentation to start accessing the two Private Transactions endpoints: eth_sendPrivateTransaction eth_cancelPrivateTransaction 3. Notify Transact is natively integrated with Alchemy Notify , which gives you real-time alerts when transactions are mined or dropped from the mempool."
2,https://docs.alchemy.com/reference/transact-api-quickstart,"This allows you to send push notifications to your users when transactions are included on-chain, so they don’t have to refresh the screen to manually monitor changes in transaction status. Get started For details on how to start using Transaction Notifications, check out the Notify API Quickstart guide. 4. Gas Optimized Transactions Save gas costs while not compromising on mine speed and mine rate. Built on Reinforced Transactions, this feature takes advantage of EIP-1559 to reduce the priority gas fee while increasing inclusion rates and decreasing time to mine. 5. Transaction Simulation Know transaction outcomes before they happen. Identify state changes and risks before signing. Features that are coming soon: Alchemy Transact is just getting started, and there’s a lot on the roadmap. Sign up to get on the waitlist for what’s coming soon. 6. Gas Oracle Leverage Supernode infrastructure to provide better gas price estimates than a single node. Minimize transaction cost without compromising on transaction success. ReadMe"
1,https://docs.alchemy.com/reference/solana-api-quickstart,"Don’t have an API key? Sign up to start building on Solana Get started for free Getting Started Instructions 1. Choose a package manager (npm or yarn) For this guide, we will be using npm or yarn as our package manager to install either alchemy-sdk or any other packages. npm To get started with npm , follow the documentation to install Node.js and npm for your operating system: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm yarn To get started with yarn , follow these steps: https://classic.yarnpkg.com/lang/en/docs/install 2. Set up your project (npm or yarn) Shell (npm) Shell (yarn) mkdir alchemy-solana-api cd alchemy-solana-api npm init --yes mkdir alchemy-solana-api cd alchemy-solana-api yarn init --yes 3. Install Solana Web3.js Library Run the following command to install the Solana Web3.js library with npm or yarn. npm yarn npm install --save @solana/web3.js yarn add @solana/web3.js 4. Make your first request You are all set now to use Solana API and make your first request. For instance, lets make a request to get latest slot . Create an index.js file and paste the following code snippet into the file. index.js const solanaWeb3 = require(""@solana/web3.js"");"
2,https://docs.alchemy.com/reference/solana-api-quickstart,"const main = async () => { rpc = ""https://solana-mainnet.g.alchemy.com/v2/<Your-Alchemy-API-Key>""; // RPC URL for connecting with a Solana node connection = new solanaWeb3.Connection(rpc, ""confirmed""); // confirming the connection let slot = await connection.getSlot(); // getting the most recent slot number console.log(""The latest slot number is"", slot); // logging the most recent slot number }; main(); 5. Run script To run the above node script, use cmd node index.js , and you should see the output. shell The latest slot number is 164150510 Leverage Alchemy's AccountsDB Infrastructure for Solana RPC Requests! The most expensive Solana RPC requests involve account scans, such as getProgramAccounts and getLargestTokenAccounts . These methods are incredibly useful but non-performant methods since they induce a heavy RPC load on Solana validator nodes, often resulting in a 5XX response due to timeout or a response with high latency. Alchemy has built out core infrastructure that sits atop our Solana validator nodes to support these methods at scale, through what we call the AccountsDB Infrastructure. This infrastructure allows for faster , scalable , and more reliable responses to these methods by paginating the response with a pageKey . You could then loop through your that same request with at scan and aggregate the full response from our validator nodes. You can see pageKey is now an optional parameter in each account-scanning method in our Solana docs , and you may also include an order optional parameter that would sort the accounts in the response by their pubkey field."
3,https://docs.alchemy.com/reference/solana-api-quickstart,"Here's an example with getProgramAccounts : TypeScript const axios = require(""axios""); function getProgramAccountsExample() { let gPAExampleRequest = { ""method"": ""alchemy_getProgramAccounts"", ""params"": [ ""ZETAxsqBRek56DhiGXrn75yj2NHU3aYUnxvHXpkf3aD"", { ""encoding"": ""base64"", ""withContext"": true, ""order"": ""desc"" } ], ""id"": 0, ""jsonrpc"": ""2.0"" } let programAccounts = [] const alchemyRPCUrl = ""https://solana-mainnet.g.alchemy.com/v2/<YOUR-API-KEY>"" try { let response = await axios.post(url, gPAExampleRequest); let responseData = response.data[""result""] // continue aggregating if there's a new pageKey present in the latest response while (responseData[""pageKey""]) { programAccounts = programAccounts.concat(responseData[""value""]); // place the pagekey within the optional config object // (you may need to create that config object if you didn't have it originally) gPAExampleRequest[""params""][1][""pageKey""] = responseData[""pageKey""]; // make another call to getProgramAccounts with the pageKey response = await axios.post(url, gPAExampleRequest); responseData = response.data[""result""] } programAccounts = programAccounts.concat(responseData[""value""]); return programAccounts; } catch (err) { console.error(`Error in Response, Data is: ${err.data}`); return []; } } Solana Tutorials You must not stop here! Check out the following tutorials to learn how to build with Solana: Hello World Solana Program How to Set Up Your Solana Development Environment How to Integrate a Solana Program with a Web3 Application How to Build a Solana NFT Collection ReadMe"
1,https://docs.alchemy.com/reference/polygon-zkevm-api-quickstart,"To use the Polygon zkEVM API you'll need to create a free Alchemy account first! Introduction Polygon zkEVM is a decentralized Ethereum Layer 2 network that uses cryptographic zero-knowledge proofs to offer validity and quick finality to off-chain transactions. Emulating the Ethereum Virtual Machine (EVM), zkEVM allows for transparent deployment of existing Ethereum smart contracts while enhancing scalability, security, and transaction throughput. By utilizing zkEVM, developers can build decentralized applications with quick finality and improved performance, all within the Ethereum ecosystem. What is Polygon zkEVM API? The Polygon zkEVM API is a collection of JSON-RPC methods that enable developers to interact with the Polygon zkEVM network. Using the endpoints provided by the API, developers can access up-to-date network data and submit transactions to it. Getting Started Instructions 1. Choose a Package Manager (npm or yarn) Before you begin, you'll need to choose a package manager to manage dependencies in your project. The two most popular package managers for Node.js are npm and yarn . You can choose the one you're most comfortable with. npm To get started with npm , follow the documentation to install Node.js and npm for your operating system: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm yarn To get started with yarn , follow these steps: https://classic.yarnpkg.com/lang/en/docs/install 2. Set up your project (npm or yarn) Let's start by setting up a simple Node.js project. Open your terminal and run the following commands: npm yarn mkdir alchemy-polygon-zkevm-api cd alchemy-polygon-zkevm-api npm init --yes"
2,https://docs.alchemy.com/reference/polygon-zkevm-api-quickstart,"mkdir alchemy-polygon-zkevm-api cd alchemy-polygon-zkevm-api yarn init --yes This will create a new directory called alchemy-polygon-zkevm-api and initialize a new Node.js project in it. 3. Make Your First Request To make requests to the Polygon zkEVM API, you'll need to use an HTTP client. In this guide, we'll use Axios, a popular HTTP client for Node.js. Install Axios as a dependency in your project with the command below: npm yarn npm install axios yarn add axios Next, let's create a script that will make a request to the eth_blockNumber JSON-RPC method on Polygon zkEVM. Create a new file called index.js in your project directory and add the following code: index.js const axios = require('axios'); const apiKey = 'YOUR_API_KEY'; // Replace with your Alchemy API key const url = `https://polygonzkevm-mainnet.g.alchemy.com/v2/${apiKey}`; const payload = { jsonrpc: '2.0', id: 1, method: 'eth_blockNumber', params: [] }; axios.post(url, payload) .then(response => { console.log('Block Number:', response.data.result); }) .catch(error => { console.error(error); }); Remember to replace YOUR_API_KEY with your actual Alchemy API key that you can get from your Alchemy dashboard ."
3,https://docs.alchemy.com/reference/polygon-zkevm-api-quickstart,"4. Run Script To run the script and make the request to the Polygon zkEVM API, execute the following command in your terminal: Shell node index.js As a result, should see the current block number on Polygon zkEVM (in hex format) printed to the console: Shell Block Number: 0x6d68e Next Steps Congratulations! You've successfully made your first request to the Polygon zkEVM API using Alchemy. From here, you can explore the various JSON-RPC methods available on Polygon zkEVM and start building your decentralized applications on it! ReadMe"
1,https://docs.alchemy.com/reference/astar-api-quickstart,"Don’t have an API key? Sign up to start building on Astar Get started for free Getting Started Instructions 1. Choose a package manager (npm or yarn) For this guide, we will be using npm or yarn as our package manager to install either alchemy-sdk or any other packages. npm To get started with npm , follow the documentation to install Node.js and npm for your operating system: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm yarn To get started with yarn , follow these steps: https://classic.yarnpkg.com/lang/en/docs/install 2. Set up your project (npm or yarn) Shell (npm) Shell (yarn) mkdir alchemy-astar-api cd alchemy-astar-api npm init --yes mkdir alchemy-astar-api cd alchemy-astar-api yarn init --yes 3. Install Alchemy-SDK Run the following command to install the Alchemy SDK with npm or yarn. npm yarn npm install alchemy-sdk yarn add alchemy-sdk 4. Make your first request You are all set now to use Astar API and make your first request. For instance, lets make a request to get latest block . Create an index.js file and paste the following code snippet into the file. index.js const { Network, Alchemy } = require(""alchemy-sdk""); // Optional Config object, but defaults to demo api-key and eth-mainnet. const settings = { apiKey: ""demo"", // Replace with your Alchemy API Key. network: Network.ASTAR_MAINNET, // Replace with your network."
2,https://docs.alchemy.com/reference/astar-api-quickstart,"}; const alchemy = new Alchemy(settings); async function main() { const latestBlock = await alchemy.core.getBlockNumber(); console.log(""The latest block number is"", latestBlock); } main(); 5. Run script To run the above node script, use cmd node index.js , and you should see the output. shell The latest block number is 2404244 Astar Tutorials You must not stop here! Want to build your first Dapp on Astar and use Astar APIs? Head towards Alchemy Tutorials. View : https://docs.alchemy.com/docs For full documentation on the available endpoints for alchemy-sdk, check the github repo: github.com GitHub - alchemyplatform/alchemy-sdk-js: The easiest way to connect your dApp to the blockchain. ReadMe"
1,https://docs.alchemy.com/reference/trace-api-quickstart,To use the Trace API your Alchemy plan must be set to the Growth or Enterprise tiers. Upgrade your plan for access. The Trace API is only supported on Mainnet and Goerli . Don’t have an API key? Sign up or upgrade your plan for access. Get started for free Introduction The Trace API methods provide full externality trace functions on transactions executed in the Ethereum chain. Filtering is simple by using just the address information. The returned information includes the execution of the following: CREATE SUICIDE Variants of the CALL Input data Output data Gas usage Amount transferred Success status of individual actions Trace use cases Common use cases for the Trace API come in all flavors. Below are popular ones: Use case Description Endpoint Trace call Executes the given call and returns a number of possible traces for it. trace_call Trace block Returns the traces executed in the block. trace_bock Trace get Returns the traces executed in the block. trace_get Trace types Type Parameter Description Network Support Transaction Trace trace Trace of your transaction. See trace actions for details. Ethereum Mainnet & Goerli State difference stateDiff Ethereum state changed values of a transaction. Ethereum Mainnet & Goerli Virtual Machine Execution Trace vmTrace Runs a full trace of the VM's state & subcalls in the transaction. None Trace actions types CREATE Used to create a smart contract.
2,https://docs.alchemy.com/reference/trace-api-quickstart,"Example response JSON { ""action"": { ""from"": ""0x6090a6e47849629b7245dfa1ca21d94cd15878ef"", ""gas"": ""0x6a7f1"", ""init"": ""0x606060405260405160208061051683398101604052515b60028054600160a060020a03808416600160a060020a0319928316179092556000805433909316929091169190911790554260019081556005805460ff19169091179055346004555b505b6104a6806100706000396000f300606060405236156100885763ffffffff60e060020a60003504166305b34410811461008a5780630b5ab3d5146100ac57806313af4035146100be5780632b20e397146100dc5780633fa4f24514610108578063674f220f1461012a5780638da5cb5b14610156578063b0c8097214610182578063bbe427711461019c578063faab9d39146101b1575bfe5b341561009257fe5b61009a6101cf565b60408051918252519081900360200190f35b34156100b457fe5b6100bc6101d5565b005b34156100c657fe5b6100bc600160a060020a036004351661021d565b005b34156100e457fe5b6100ec6102c3565b60408051600160a060020a039092168252519081900360200190f35b341561011057fe5b61009a6102d2565b60408051918252519081900360200190f35b341561013257fe5b6100ec6102d8565b60408051600160a060020a039092168252519081900360200190f35b341561015e57fe5b6100ec6102e7565b60408051600160a060020a039092168252519081900360200190f35b341561018a57fe5b6100bc60043560243515156102f6565b005b34156101a457fe5b6100bc600435610382565b005b34156101b957fe5b6100bc600160a060020a0360043516610431565b005b60015481565b60055460ff16156101e65760006000fd5b600254604051600160a060020a039182169130163180156108fc02916000818181858888f193505050501561021a5761deadff5b5b565b60005433600160a060020a039081169116146102395760006000fd5b600160a060020a038116151561024f5760006000fd5b600280546003805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03808516919091179092559084169116811790915560408051918252517fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf369181900360200190a15b5b50565b600054600160a060020a031681565b60045481565b600354600160a060020a031681565b600254600160a060020a031681565b60005433600160a060020a039081169116146103125760006000fd5b60055460ff1615156103245760006000fd5b8160045410156103345760006000fd5b6004829055600254604051600160a060020a039182169130163184900380156108fc02916000818181858888f193505050501580156103705750805b1561037b5760006000fd5b5b5b5b5050565b60005433600160a060020a0390811691161461039e5760006000fd5b60055460ff1615156103b05760006000fd5b6005805460ff1916905561dead6108fc6103e883810330600160a060020a031631025b604051919004801590920291906000818181858888f1935050505015156103fa5760006000fd5b6040517fbb2ce2f51803bba16bc85282b47deeea9a5c6223eabea1077be696b3f265cf1390600090a16102bf6101d5565b5b5b5b50565b60005433600160a060020a0390811691161461044d5760006000fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b505600a165627a7a72305820fbfa6f8a2024760ef0e0eb29a332c9a820526e92f8b4fbcce6f00c7643234b140029000000000000000000000000a7f3659c53820346176f7e0e350780df304db179"", ""value"": ""0xe4b4b8af6a70000"" }, ""blockHash"": ""0x6d00f7707938cca36b0730d8f7f090543242002b6fa0fe94bf85b9ab02e6bed6"", ""blockNumber"": 4000036, ""result"": { ""address"": ""0xfc9779d9a0f2715435a3e8ebf780322145d7546e"", ""code"": ""0x606060405236156100885763ffffffff60e060020a60003504166305b34410811461008a5780630b5ab3d5146100ac57806313af4035146100be5780632b20e397146100dc5780633fa4f24514610108578063674f220f1461012a5780638da5cb5b14610156578063b0c8097214610182578063bbe427711461019c578063faab9d39146101b1575bfe5b341561009257fe5b61009a6101cf565b60408051918252519081900360200190f35b34156100b457fe5b6100bc6101d5565b005b34156100c657fe5b6100bc600160a060020a036004351661021d565b005b34156100e457fe5b6100ec6102c3565b60408051600160a060020a039092168252519081900360200190f35b341561011057fe5b61009a6102d2565b60408051918252519081900360200190f35b341561013257fe5b6100ec6102d8565b60408051600160a060020a039092168252519081900360200190f35b341561015e57fe5b6100ec6102e7565b60408051600160a060020a039092168252519081900360200190f35b341561018a57fe5b6100bc60043560243515156102f6565b005b34156101a457fe5b6100bc600435610382565b005b34156101b957fe5b6100bc600160a060020a0360043516610431565b005b60015481565b60055460ff16156101e65760006000fd5b600254604051600160a060020a039182169130163180156108fc02916000818181858888f193505050501561021a5761deadff5b5b565b60005433600160a060020a039081169116146102395760006000fd5b600160a060020a038116151561024f5760006000fd5b600280546003805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03808516919091179092559084169116811790915560408051918252517fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf369181900360200190a15b5b50565b600054600160a060020a031681565b60045481565b600354600160a060020a031681565b600254600160a060020a031681565b60005433600160a060020a039081169116146103125760006000fd5b60055460ff1615156103245760006000fd5b8160045410156103345760006000fd5b6004829055600254604051600160a060020a039182169130163184900380156108fc02916000818181858888f193505050501580156103705750805b1561037b5760006000fd5b5b5b5b5050565b60005433600160a060020a0390811691161461039e5760006000fd5b60055460ff1615156103b05760006000fd5b6005805460ff1916905561dead6108fc6103e883810330600160a060020a031631025b604051919004801590920291906000818181858888f1935050505015156103fa5760006000fd5b6040517fbb2ce2f51803bba16bc85282b47deeea9a5c6223eabea1077be696b3f265cf1390600090a16102bf6101d5565b5b5b5b50565b60005433600160a060020a0390811691161461044d5760006000fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b505600a165627a7a72305820fbfa6f8a2024760ef0e0eb29a332c9a820526e92f8b4fbcce6f00c7643234b140029"", ""gasUsed"": ""0x52ce0"" }, ""subtraces"": 0, ""traceAddress"": [ 0 ], ""transactionHash"": ""0xc9601ea5ca42e57c3ef1d770ab0b278d6aadf2511a4feb879cba573854443423"", ""transactionPosition"": 70, ""type"": ""create"" }, Create parameter definitions Parameter Description Example from The address that created the contract. 0x6090a6e47849629b7245dfa1ca21d94cd15878ef gas Contract gas fee to create the contract. 0x6a7f1 init Initialization code to create the contract. 0x6060604052604051602080610516833981016040... value The value sent to the contract. 0xe4b4b8af6a7000 blockHash Block hash ID in the transaction. 0x6d00f7707938cca36b0730d8f7f090543242002b6fa0fe94bf85b9ab02e6bed6 blockNumber Transaction block number. 4000036 address Location address of the new contract. 0xfc9779d9a0f2715435a3e8ebf780322145d7546e code The contract code. 0x606060405236156100885763ffffffff60e060020... gasUsed Required fee (gas) to create the contract. 0x52ce0 subtraces Total number of transaction child traces. 0 traceAddress Index of a trace & order of subcalls. 0 transactionHash Hash ID of the transaction. 0xc9601ea5ca42e57c3ef1d770ab0b278d6aadf2511a4feb879cba573854443423 transactionPosition The transaction position in the block. 70 type Type of operation code (OPCODE). create SUICIDE SUICIDE is captured when a smart contract is destroyed. That is when the selfdestruct function of Solidity is used. SUICIDE transfers the contract's balance to the address specified in the selfdestruct function clearing on-chain memory."
3,https://docs.alchemy.com/reference/trace-api-quickstart,"The cleared memory is processed as a refund of the total gas cost to complete the transaction. Example response JSON { ""action"": { ""address"": ""0x87051f6ba0562fdb0485763562bf34cb2ad705b1"", ""refundAddress"": ""0x000000000000000000000000000000000000dead"", ""balance"": ""0x0"" }, ""blockHash"": ""0x6d00f7707938cca36b0730d8f7f090543242002b6fa0fe94bf85b9ab02e6bed6"", ""blockNumber"": 4000036, ""result"": null, ""subtraces"": 0, ""traceAddress"": [ 1, 2, 2 ], ""transactionHash"": ""0xbc15addb97490a168dc1d099ab8537caf2e4ff7d1deeff6d685d2d594a750037"", ""transactionPosition"": 45, ""type"": ""suicide"" }, SUICIDE parameter definitions Parameter Description Example address The address of contract to destroy. 0x87051f6ba0562fdb0485763562bf34cb2ad705b1 refundAddress Address to send remainder of contract balance . 0x000000000000000000000000000000000000dead blockHash Block hash ID of the transaction. 0x6d00f7707938cca36b0730d8f7f090543242002b6fa0fe94bf85b9ab02e6bed6 blockNumber Transaction block number. 4000036 result Used for SELFDESTRUCT calls. null subtraces Total number of transaction child traces. 0 traceAddress Index of the trace & the order of subcalls. 1 and 2 transactionHash Hash ID of the transaction. 0xbc15addb97490a168dc1d099ab8537caf2e4ff7d1deeff6d685d2d594a750037 transactionPosition The position of the transaction in the block. 45 type Type of operation code (OPCODE). suicide CALL CALL is used for transferring ETH between externally owned accounts (EOAs). Also used to CALL a smart contract function."
4,https://docs.alchemy.com/reference/trace-api-quickstart,"Example response JSON { ""action"": { ""from"": ""0xbc9f06dd67578b0b8b4d87fda9acde453bc4c067"", ""callType"": ""call"", ""gas"": ""0x97478"", ""input"": ""0xfebefd610000000000000000000000000000000000000000000000000000000000000040cc849afc28894f79411f12309e75c71ded27d1666b75a2423633c204e671cb1e00000000000000000000000000000000000000000000000000000000000000036eaec0ff7c4899bec2db1479d7d195d614ca26819a301523d82daaaaf436122d2ceb36dfa12b359202b4dfd756478988f5023bf7297afa81f563d4b6242e36e707671a8bf38ee483a37feca948997dcfba17b3372e166ba5c824629beeed6b5c"", ""to"": ""0x6090a6e47849629b7245dfa1ca21d94cd15878ef"", ""value"": ""0x2386f26fc10000"" }, ""blockHash"": ""0x6d00f7707938cca36b0730d8f7f090543242002b6fa0fe94bf85b9ab02e6bed6"", ""blockNumber"": 4000036, ""result"": { ""gasUsed"": ""0x7ad71"", ""output"": ""0x"" }, ""subtraces"": 4, ""traceAddress"": [], ""transactionHash"": ""0x552b31a3a9c92577d65db62cf9f729e81571e10cad90e356423adcfa2caebacc"", ""transactionPosition"": 71, ""type"": ""call"" } CALL parameter definitions Parameter Description Example from Address of the sender. 0xbc9f06dd67578b0b8b4d87fda9acde453bc4c067 callType The type of CALL . call , delegatecall , callcode or staticcall gas The gas included in the transaction. 0x97478 input Specific call function on the contract. to Address of the receiver. 0x6090a6e47849629b7245dfa1ca21d94cd15878ef value Transferred value amount. 0x2386f26fc10000 blockHash Transaction block hash ID. 0x6d00f7707938cca36b0730d8f7f090543242002b6fa0fe94bf85b9ab02e6bed6 blockNumber Transaction block number. 4000036 gasUsed gas used to execute the transaction. 0x7ad71 output The result of the smart contract function call. 0x subtraces Total number of transaction child traces. 4 traceAddress Index of a trace & the order of subcalls. [] transactionHash Hash ID of the transaction. 0x552b31a3a9c92577d65db62cf9f729e81571e10cad90e356423adcfa2caebacc transactionPosition The position of the transaction in the block. 71 type Type of operation code (OPCODE). call How to read a traceAddress Traces are structured in a tree format. The traceAddress field represents the position of the trace in the tree."
5,https://docs.alchemy.com/reference/trace-api-quickstart,Below is a diagram of the traceAddress set of tree results: Trace tree diagram Helpful Resources What are EVM Traces? Trace API vs. Debug API trace_call vs debug_traceCall ReadMe
1,https://docs.alchemy.com/docs,"🚀 Getting Started Learn how to get started with Alchemy and set up core web3 development tools. As a bonus also learn about the development best practices. Alchemy Quickstart Guide How to Set Up Core Web3 Developer Tools Developer Best Practices 💳 Wallet Set Up The first thing you need for web3 development is a web3 wallet. Learn how to set up a web3 wallet and supercharge it by adding an Alchemy RPC endpoint to it! How to Install a Web3 Wallet How to Add Alchemy RPC Endpoints to Metamask ✨ Alchemy University Alchemy University is the ultimate ecosystem for learning how to build and interact with web3. Our goal is to teach you everything you need to know to start building in web3, from hands on, comprehensive bootcamps to starter code that expedites your workflow. Check out the learning paths below: JavaScript Fundamentals Ethereum Developer Bootcamp Road to Web3 Starter code ✍️ Creating Smart Contracts Learn how to create smart contracts from scratch on blockchains such as Ethereum, Solana and Arbitrum. Hello World Smart Contract Hello World Solana Program NFT Minter Tutorial: How to Create a Full Stack DApp How to Create an NFT on Ethereum Tutorial Arbitrum NFTs: Creating and Deploying ERC-721 How to Build a Solana NFT Collection 🎨 NFTs In this series of tutorials, you will learn everything you need to know about NFTs, for example, airdropping nfts, using Alchemy's NFT API, creating on-chain and off-chain NFT allowlists, creating token gated communities and much more! NFT Project Code Templates NFT API Creating NFT Allowlists"
2,https://docs.alchemy.com/docs,"NFT Transactions 💰 DeFi This section is full of knowledge about DeFi, from working with ERC-20 tokens to running ETH 2.0 staking node with Alchemy. We got you covered! ERC-20 Tokens Token Balances Running an Eth2.0 Staking Node or Validator with Alchemy 💸 Transactions Transactions are the most important aspect of blockchains, pretty much everything is done through transactions, from sending the cryptocurrencies to interacting with the smart contracts. In this section you will learn how to send transactions, get transaction history, query transaction data and much more! Understanding Transactions Sending Transactions Transaction History On-chain Events 📣 Streaming Data Learn how to use Alchemy webhooks to stream real-time data. You will learn how to integrate Alchemy webhooks with zapier, creating whale alerts and sending real-time transaction notifications to dapps. How to Integrate Alchemy Webhooks with Zapier How to Get Notifications for NFT Contract Creations in Three Simple Steps How to Create Whale Alert Bots Transaction Notifications WebSocket Subscriptions Custom Webhooks Tutorials 👾 Diving Deeper into Solidity Dive deeper into Solidity concepts and learn about smart contract storage layout, interpreting binaries in solidity and verifying a message signature on Ethereum. What is Smart Contract Storage Layout? What are Payable Functions in Solidity? How to Interpret Binaries in Solidity How to Verify a Message Signature on Ethereum 🖥 Understanding the EVM Explore the EVM from the inside out, learn about archive data, uncle blocks, upgrading Ethereum nodes, Ethereum miner rewards, EIP-1559 and deploying a contract to the same address on multiple networks! How to Get the Latest Block on Ethereum What are Uncle Blocks? What is Archive Data on Ethereum?"
3,https://docs.alchemy.com/docs,"Internal Playbook: Upgrading Ethereum Nodes How to Calculate Ethereum Miner Rewards EIP-1559 Resource and Tutorial Hub How to Deploy a Contract to the Same Address on Multiple Networks Web3 Glossary Blockchain 101 🛠SDKs and Libraries Learn how to work with libraries such as Ethers.js and Web3.js. Ethers.js vs Web3.js SDK Comparison What is Ethers.js? How to Fork Ethereum Mainnet 🖼️ Frontend Tutorials Learn how to build beautiful web3 dapps with our front-end tutorials! How to Build ""Buy Me a Coffee"" DeFi dapp How to Create an NFT Gallery How to Build a Staking Dapp How to Build an NFT Marketplace from Scratch How to Build a Token Swap Dapp With 0x API How to Create a Decentralized Twitter with Lens Protocol NFT Minter Tutorial: How to Create a Full Stack DApp How to Build a Solana NFT Collection Integrating Historical Transaction Data into your dApp Building a dApp with Real-Time Transaction Notifications How to Create a Signature Generator DApp 👯‍♀️ Community Tutorials Learn from awesome writers in the web3 space. Click here to learn from community contributors or just click on the next page below! Updated 15 days ago ReadMe"
1,https://docs.alchemy.com/docs/solidity-payable-functions,"Objectives By the end of this guide, you should be able to: Understand the purpose and usage of payable functions in Solidity Learn how to send Ether to a smart contract Write a payable function in Solidity Create a revertible payable function with conditions Implement custom logic within a payable function Learn about message calls and their relevance in the Ethereum Virtual Machine (EVM) Payable Functions Payable functions in Solidity are functions that let a smart contract accept Ether. They help developers manage incoming Ether and take actions when it's received. For example, a simple payable function can collect Ether donations for a fundraiser. Here's a basic code example: Fundraiser.sol pragma solidity ^0.8.0; contract Fundraiser { function donate() external payable { // Ether is received and stored in the contract's balance // You can perform any other actions with the Ether received here - for example, sending it to some other address etc. } } In this example, when the donate function is called, it accepts Ether sent by the donor and adds it to the contract's balance. The keyword payable allows someone to send ether to a contract and run code to account for this deposit. This code could potentially log an event, modify storage to record the deposit, or it could even revert the transaction if it chooses to do so. When a developer explicitly marks a smart contract with the payable type , they are saying “I expect ether to be sent to this function”."
2,https://docs.alchemy.com/docs/solidity-payable-functions,"To understand why this is important, imagine how bad it would be if someone sent ether to a contract and the developer did not write code to handle that event. In that case, it would be highly possible that the ether could be locked forever or never withdrawn by its intended recipient. How to Send Ether to a Smart Contract Sending ether is a native function of the Ethereum Virtual Machine (EVM) . This is different from any other transfer in the EVM which requires the developer to write custom logic inside a smart contract to handle the transfer (i.e. for NFTs or ERC20s). When someone sends ether to a smart contract , they do so through a value field on the transaction itself. Let’s take a look at what a transaction looks like in JSON: JSON { ""to"": ""0x5baf84167cad405ce7b2e8458af73975f9489291"", ""value"": ""0xb1a2bc2ec50000"", // 1 ether ""data"": ""0xd0e30db0"" // deposit() // ... other properties } This transaction sends 1 ether to the address 0x5baf84167cad405ce7b2e8458af73975f9489291 . If this address is a smart contract, it will attempt to parse the calldata ( data ) to figure out which smart contract function this user is attempting to call (in this case it is deposit() ). Depending on whether the function is payable or non-payable, one of two things will happen: If the function is a payable function, then it will run the logic. If the function is not payable, the transaction will revert and funds will be returned minus the gas cost for the transaction."
3,https://docs.alchemy.com/docs/solidity-payable-functions,"What is an example of a Solidity payable function? Here is an example of a basic payable function in Solidity with the deposit function: deposit function deposit() payable external { // no need to write anything here! } Notice, in this case, we didn’t write any code in the deposit function body. Writing a payable function alone is enough to receive ether and you may not need to write any logic. For example, if this was a payable smart contract that was controlled by a charity accepting cryptocurrency donations, perhaps users would just call deposit and the charity would eventually be able to withdraw these contributions to an address of their choosing. In that case, it may be better to write a receive function: receive receive() external payable { // this built-in function doesn't require any calldata, // it will get called if the data field is empty and // the value field is not empty. // this allows the smart contract to receive ether just like a // regular user account controlled by a private key would. } What is an example of a Solidity payable function that can revert? A payable smart contract function can revert. Here is an example of a revertible payable function that uses two require statements for msg.value and balances[msg.sender] . sol mapping(address => uint) balances; function deposit() payable external { // deposit sizes are restricted to 1 ether require(msg.value == 1 ether); // an address cannot deposit twice require(balances[msg.sender] == 0); balances[msg.sender]"
4,https://docs.alchemy.com/docs/solidity-payable-functions,"+= msg.value; } If either of the require statements are not true , the transaction would revert and the sender would receive their funds back. Why might we write logic in a payable function? If we had a smart contract where we needed to keep track of who deposited which ether, we might keep track of that in storage: sol mapping(address => uint) balances; function deposit() payable external { // record the value sent // to the address that sent it balances[msg.sender] += msg.value; } The msg.value here corresponds with the value field encoded in the transaction we looked at in the “how to send ether” section. As a Solidity developer, we can tap into message value to record deposits and map it to some internal balance for the address making this transaction. Why is it called msg.value? In the EVM, interactions with smart contracts are referred to as message calls . This is true whether a user is calling a smart contract directly or if a smart contract is calling another smart contract (internal transaction). Solidity Payable Functions In summary, a payable function is a function that can receive ether. It provides the developer with the opportunity to respond to an ether deposit for record-keeping or any additional necessary logic. Updated about 1 month ago ReadMe"
1,https://docs.alchemy.com,"The web3 developer hub View API References, guides, and tutorials for Ethereum, Polygon, Optimism, Arbitrum, Solana and Astar. View docs NFT API docs... dive into resources Most popular NFT API Quickstart Easiest way to get NFT data from ownership to sales to metadata and more. Ethereum API Quickstart How to get started building on Ethereum and using the JSON-RPC API. SDK Quickstart The easiest way to connect your dApp to the blockchain using JavaScript. alchemy_pendingTransactions Subscribe to full transaction objects or hashes that are pending based on provided filters. What are payable functions in Solidity? Learn how payable functions work in Solidity. How to get all NFTs owned by an address Query all NFTs owned by a provided address in one line of code. Learn how to build in web3 Alchemy University Ethereum Developer Bootcamp and JavaScript Fundamentals Courses, for free. Create Web3 Dapp Create a full-stack dApp in ~4 mins, right from the command-line. View all tutorials Web3 tutorials for all topics: NFTs, Solidity, DeFI, transactions, and more! API references for all chains Including free Archive data on all chains and testnets. Ethereum Polygon PoS Arbitrum Optimism Solana Astar Polygon ZKEVM Starknet Use case APIs APIs built to optimize your code and make life as a developer way easier."
2,https://docs.alchemy.com,"View all APIs NFT API Get all the NFT data you need with this suite of endpoints Transact Send transactions 7.9x faster Token API Get token valuable information to display to users Transfers API Get historical transactions for any address or contract Notify API Webhooks for transaction activity Trace API Deep insights for transaction processing Trusted by the best in the industry Community Driven Join the web3 developer community Get help with your product, meet other developers, and get access to a world-class community ReadMe"
1,https://docs.alchemy.com/reference/arbitrum-api-quickstart,"Don’t have an API key? Sign up to start building on Arbitrum Get started for free Getting Started Instructions 1. Choose a package manager (npm or yarn) For this guide, we will be using npm or yarn as our package manager to install either alchemy-sdk or any other packages. npm To get started with npm , follow the documentation to install Node.js and npm for your operating system: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm yarn To get started with yarn , follow these steps: https://classic.yarnpkg.com/lang/en/docs/install 2. Set up your project (npm or yarn) Shell (npm) Shell (yarn) mkdir alchemy-arbitrum-api cd alchemy-arbitrum-api npm init --yes mkdir alchemy-arbitrum-api cd alchemy-arbitrum-api yarn init --yes 3. Install Alchemy-SDK Run the following command to install the Alchemy SDK with npm or yarn. npm yarn npm install alchemy-sdk yarn add alchemy-sdk 4. Make your first request You are all set now to use Arbitrum API and make your first request. For instance, lets make a request to get latest block . Create an index.js file and paste the following code snippet into the file. index.js const { Network, Alchemy } = require(""alchemy-sdk""); // Optional Config object, but defaults to demo api-key and eth-mainnet. const settings = { apiKey: ""demo"", // Replace with your Alchemy API Key. network: Network. ARB_MAINNET, // Replace with your network."
2,https://docs.alchemy.com/reference/arbitrum-api-quickstart,"}; const alchemy = new Alchemy(settings); async function main() { const latestBlock = await alchemy.core.getBlockNumber(); console.log(""The latest block number is"", latestBlock); } main(); 5. Run script To run the above node script, use cmd node index.js , and you should see the output. shell The latest block number is 42421188 Arbitrum Tutorials You must not stop here! Want to build your first Dapp on Arbitrum and use Arbitrum APIs? Check out the following tutorials to learn how to build on Arbitrum: Arbitrum NFTs: Creating and Deploying ERC-721 Arbitrum SDK Examples Arbitrum API FAQ How to Add Arbitrum to Metamask For full documentation on the available endpoints for alchemy-sdk, check the github repo: github.com GitHub - alchemyplatform/alchemy-sdk-js: The easiest way to connect your dApp to the blockchain. ReadMe"
1,https://docs.alchemy.com/reference/api-overview,"ReadMe Don’t have an API key? Unlock millions of requests and free archive data on all chains. Get started for free APIs for Web3 Use Cases Alchemy’s Enhanced API offering is built to optimize your code and make life as a developer way easier. Check out all Enhanced APIs on the Enhanced APIs Overview page. NFT API Instantly find, verify, and display any NFT, across all major blockchains. Learn more Token API Easily request information about specific tokens like metadata or wallet balances. Learn more Transfers API Fetch historical transactions for any address in one request. Learn more Transact API Suite of APIs built to make your transactions more secure, transparent, and faster. Learn more Trace API Trace API methods give you access to the most detailed information about on-chain activity. Learn more Debug API Get more detailed information and data on transaction behavior. Learn more Transactions Receipts Get all transaction receipts for a given block by number or block hash. Learn more Real-time Event Streams If you're looking to integrate real-time events into your application check out the following API docs for WebSockets and Webhooks: Subscription API Quickstart WebSockets Learn more Notify API Quickstart Webhooks Learn more Supported Chains Alchemy supports both EVM and non-EVM chains, view API references below: Ethereum Polygon PoS Optimism Arbitrum Astar Solana Polygon zkEVM Starknet Alchemy SDK The easiest way to connect your dApp to the blockchain and get the power of Alchemy's infrastructure. Just download, write two lines of code, and go. Quickstart Guide ReadMe"
1,https://docs.alchemy.com/docs/create-web3-dapp,"👍 Quickstart Check out Create Web3 Dapp Quickstart or get started by running the following from your command line: npx [email protected] create-web3-dapp is an npx package that allows developers to create any web3 application, from a simple, barebones dApp to a feature-rich decentralized platform, in <4 minutes 🤩. The create-web3-dapp package creates a NextJs-based web3-enabled application under the hood that is compatible with the most used blockchains including Ethereum, Polygon, Optimism, and Arbitrum . This allows web3 developers to prototype decentralized apps at lightning speed, using pre-made React components, webhooks, and APIs. There are three primary resources within create-web3-dapp: The CLI Builder - select the options that you want to create dApp boilerplate code createweb3dapp.com - preview, try, copy and quickly plug in pre-built React components like the NFT gallery, NFT Minting page, Token balances panel, NFT collection info panel, and more! The Smart Contracts Backpack - create fully audited Smart Contracts and deployment scripts, directly from the CLI How does create-web3-dapp work? The create-web3-dapp NPX package uses a simple CLI tool to achieve complex features like wallet integration, frontend components, and smart contract generation. Only what you need : No extra fluff. Just the required tools needed to get started: NextJS, RainbowKit, Alchemy SDK, ethers, Hardhat, and Foundry, all with a cohesive curated experience on top. No Configuration Required: You don't need to configure anything."
2,https://docs.alchemy.com/docs/create-web3-dapp,"A reasonably good configuration of both development and production builds is handled for you so you can focus on deploying your contracts, and prototyping your dapp. No Lock-In: You can “eject” to a custom setup at any time. Run a single command and all the dependencies will be ejected from your project, run it again and pick up right where you left off. create-web3-dapp tool has been built to be dev-ergonomic, with no configuration or complicated folder structures, only the files you need to build your Dapp. The onboarding process is quite simple. Install the npx package, select your desired features and settings, and get up and running in ~4 mins. Check out the Quickstart - create a dapp in 4 minutes Updated 19 days ago ReadMe"
1,https://docs.alchemy.com/docs/alchemy-verified-badge,"Benefits of adding the Alchemy badge 💵 100M CUs of free Alchemy credits monthly - $100 per month through 2023. Then $50 thereafter. This is equal to 100M CUs, and 50M CUs, respectively. ⚡️ 50% more throughput - 150 more computing units per seconds (”CUPS”) to build faster 📣 Legitimacy signal - the purpose of this badge is that Alchemy certifies your project’s infrastructure and instills trust. At Alchemy’s discretion, we may include projects in marketing avenues like our newsletter or Twitter – this is on an ad-hoc basis ⬇️ Instructions below — it only takes a few minutes ⬇️ Step 1 – Find the Unique Referral Token You need to get the unique referral token of your team. Therefore, go to your team dashboard ( log into your Alchemy account ) and click on the “Get $100+” button. Highlight just the unique referral token part (everything after “?r=”). You’ll enter that in the code snippet below in Step 3. New to Alchemy? Get access to Alchemy for free here . Step 2 – Add the Badge Code to Your Website's Code In the code below, replace the words ‘UNIQUE ALCHEMY TEAM REFERRAL TOKEN HERE’ with your unique referral token from Step 2. Please add the badge to your project's official website. If your website is in React, copy the Alchemy JS into your code and then attach the ""logBadgeClick()"" function to the window and call it inside of your React code."
2,https://docs.alchemy.com/docs/alchemy-verified-badge,"Option 1: “Dark” Badge | Code JSX <script>const BADGE_ID = 'UNIQUE ALCHEMY TEAM REFERRAL TOKEN HERE';</script> <script type=""text/javascript"" src=""https://static.alchemyapi.io/scripts/badge/alchemy-badge.js""></script> <a href=""#""> <img onclick=logBadgeClick() id=""badge-button"" style=""width:240px;height:53px"" src=""https://static.alchemyapi.io/images/marketing/badge.png"" alt=""Alchemy Supercharged"" /> </a> Option 2: “Light” Badge | Code https://static.alchemyapi.io/scripts/badge/alchemy-badge.js JSX <script>const BADGE_ID = 'UNIQUE ALCHEMY TEAM REFERRAL TOKEN HERE';</script> <script type=""text/javascript"" src=""https://static.alchemyapi.io/scripts/badge/alchemy-badge.js""></script> <a href=""#""> <img onclick=logBadgeClick() id=""badge-button"" style=""width:240px;height:53px"" src=""https://static.alchemyapi.io/images/marketing/badgeLight.png"" alt=""Alchemy Supercharged"" /> </a> Step 3 – Email Us to Receive Perks To make sure you get the perks (100M CUs monthly, 50% more throughput), please email us at [email protected] and let us know you've added the badge. You can use the below email template: === SUBJECT LINE: Added the Alchemy Badge EMAIL COPY: ""Hey there, I've added the Alchemy badge to my project's official website -- [your project URL]. I use this email for my Alchemy account - [your email]. Can you please confirm and add perks to my Alchemy account? Thanks"" === 🎉 Congrats! You’re done. You'll hear back soon (usually within two days) and get credits to your account. 🎉"
3,https://docs.alchemy.com/docs/alchemy-verified-badge,Note: Alchemy reserves the right to reject projects we deem spammy. 🙋🏻‍♀️ PS - Other perks you’d like to see? Instruction improvements? Questions / hesitations about adding the badge? We want to know! Please email us at [email protected] Examples of Projects with the Badge Updated 7 days ago ReadMe
1,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"Developing a Smart Contract with Solidity and deploying it on the blockchain might sound daunting at first: solidity, security, gas optimization, developer environment, and gas fees, are only some of the things you’ll need to go through to host your code on the blockchain . Luckily though, in the last few months, a lot of tools have been released for developers to make their Smart contracts development jobs much easier. Tools like the OpenZeppelin Wizard that offers developers click and write functionalities to create composable and secure smart contracts in no time, used with Web3 developer tools like Alchemy , make the experience of writing and deploying code on the blockchain easy, fast, and reliable like never before. In this tutorial, you're going to learn how to develop and deploy an ERC721 (NFT) smart contract using Alchemy, OpenZeppelin, Remix, and Ethereum Goerli. More precisely, you will learn: How to write and modify the smart contract using OpenZeppelin and Remix Get free Goerli ETH using https://goerlifaucet.com/ Deploy it on the Ethereum Goerli testnet blockchain to save on gas fees Host the NFT tokens metadata on IPFS using Filebase. Mint an NFT and visualize it on OpenSea. You can also follow the video tutorial: Let’s start by creating the smart contract . Develop the ERC721 Smart Contract With the OpenZeppelin Contract Wizard. As said before, in this tutorial, you're going to use the OpenZeppelin Wizard to create the smart contract , for two main reasons: It’s secure. It offers standard smart contracts. When it comes to writing smart contracts, security is key."
2,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"There are tons of examples of smart contract exploits that have seen hundreds of millions of dollars stolen by malicious actors due to bad security. You don’t want someone to steal all of your precious cryptos or NFTs once you’ll deploy on the blockchain right? OpenZeppelin serves this purpose, being one of the biggest maintainers of smart contract standards (ERC20, ERC721, etc), allowing developers to use thoroughly audited code to develop reliable contracts. The first thing you'll need to do to develop our ERC721 NFT smart contract is to go on the Open Zeppelin Smart contract wizard page. Once on the page, you will see the following editor: Click on the ERC721 button on the top left corner, to select the type of ERC standard to use and the kind of contract you want to write: Now that you've selected the contract standard, on the left-hand side menu you should see a number of options: Let’s start by choosing the name and the symbol of our Tokens. Click on the text box with “MyToken” and give it a name, do the same with the Symbol, and leave the base URI field blank (the token name will be used by OpenSea and Rarible as the name of the collection). Select the NFT (ERC721) Token Features Now you'll need to select the features that you want to integrate into our Smart contract, right after the settings section, you’ll find the features section where you’ll be able to select the different modules to include in your smart contract."
3,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"In this case, you're going to select the following integrations: Mintable will create a mint function only callable by privileged accounts Autoincrement IDs will automatically assign incremental IDs to your NFTs Enumerable will give you access to on-chain Tokens enumeration and functions such as “totalSupply”, not present in the default ERC721 integration URI storage, to associate metadata and images to each of your NFTs URI Storage to be able to associate URIs to our NFTs For the sake of this tutorial, and because you don’t want to create any kind of Tokenomic around our NFTs, leave the following modules unticked: Burnable - to burn tokens Pausable - to pause tokens transfers, sales, etc Votes - gives access to governance-like features like delegates and votes If you want to learn more about these modules, check the official OpenZeppelin documentation about the ERC721 standard."
4,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"Now that you've selected the features you want, OpenZeppelin Wizard will populate the code of the Smart Contract, it should look as follow: Shell // SPDX-License-Identifier: MIT pragma solidity ^0.8.4; import ""@openzeppelin/contracts/token/ERC721/ERC721.sol""; import ""@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol""; import ""@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol""; import ""@openzeppelin/contracts/access/Ownable.sol""; contract Alchemy is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable { constructor() ERC721(""Alchemy"", ""ALC"") {} function safeMint(address to, uint256 tokenId, string memory uri) public onlyOwner { _safeMint(to, tokenId); _setTokenURI(tokenId, uri); } // The following functions are overrides required by Solidity. function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) { super._beforeTokenTransfer(from, to, tokenId); } function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) { super._burn(tokenId); } function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) { return super.tokenURI(tokenId); } function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) { return super.supportsInterface(interfaceId); } } It’s time to copy our code and bring it on Remix IDE to modify and deploy it on the Blockchain. Modify and Deploy your ERC721 contract with REMIX IDE Now that you have your ERC721 smart contract, let's modify, and deploy it on the Goerli Testnet."
5,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"To do so, you'll use Remix IDE , a free and web-based integrated development environment specifically designed for smart contract development with Solidity. First of all, as you might have noticed, on top of the OpenZeppelin Wizard editor, there’s the button “Open in Remix”: Clicking on it will open REMIX IDE in a new tab of your browser. Using Remix to Modify the NFT Smart Contract Starting from the top of the contract, there's the “SPDX-License-Identifier” that specifies the type of license your code will be published under - it’s good practice in web3 applications to keep the code open source as it will ensure trustworthiness. Shell // SPDX-License-Identifier: MIT Then there's the pragma - the version of the compiler you'll want to use to compile the smart contract code. The little “^” symbol, tells the compiler that every version between 0.8.0 to 0.8.9 is suitable to compile our code. Shell pragma solidity ^0.8.4; Then we're importing a bunch of libraries and initializing the smart contract. Shell import ""@openzeppelin/contracts/token/ERC721/ERC721.sol"" ; import ""@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol""; import ""@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol""; import ""@openzeppelin/contracts/access/Ownable.sol""; import ""@openzeppelin/contracts/utils/Counters.sol""; We're then initializing the contract, inheriting from all the standards we're importing from the OpenZeppelin repository:"
6,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"Shell contract Alchemy is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable {...} As you can notice, the safeMint function has the “only owner” modifier - this will allow only the owner of the smart contract (the wallet address that deployed the smart contract) to mint NFTs. Chances are you want anyone to mint NFTs, to do so you'll need to remove the onlyOwner modifier from the Mint function. Shell function safeMint(address to, string memory uri) public { uint256 tokenId = _tokenIdCounter.current(); _tokenIdCounter.increment(); _safeMint(to, tokenId); _setTokenURI(tokenId, uri); } You can also remove it from the contract declaration ""Ownable"", and the library imports Shell import ""@openzeppelin/contracts/access/Ownable.sol""; Now that everyone will be able to mint our NFTs, you'll need to avoid people from minting more NFTs than the max number of NFTs in our collection. To do so let's specify the max number of mintable NFTs. Let’s say the users want to be able to mint up to a total of 10,000 NFTs. To do so, let’s create a new uint256 variable, call it MAX_SUPPLY, and assign it 10,000. Shell Counters. Counter private _"
7,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"tokenIdCounter; uint256 MAX_SUPPLY = 100000; constructor() ERC721(""Alchemy"", ""ALCH"") {} Next, let’s move into the safeMint function and add a require statement on line 18: Shell require(_tokenIdCounter.current() <= MAX_SUPPLY, ""I'm sorry we reached the cap""); Let's spend a couple of words to better understand what is the ""require"" statement in Solidity. You can read more about the Solidity ""require"" statement, in the official documentation . Now that you've limited the max supply of our NFTs, is time to compile the smart contract and deploy it on the Goerli Testnet. To do so, you'll need to create a free account on Alchemy.com , add it as a node provider on Metamask, and get some free Goerli ETH . Create a Free Alchemy Account First of all, let's need to navigate to alchemy.com click on “Login” and create a new account: Select the Ethereum ecosystem: Give your application app and team a name, choose the Goerli network and click on create App: Create App Once you'll have completed the onboarding process, we'll be redirected to the dashboard. Click on the application with the name you decided, in this case, “test”, click on the “VIEW KEY” button on the top right corner , and copy the HTTP URL: Your Application Details Next, you'll need to add Alchemy to Metamask as a Goerli RPC Provider."
8,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"If you don’t have Metamask installed, make sure to follow this guide to add it to your browser and create a new wallet. Add Alchemy Goerli to Your Metamask Wallet Once Metamask will be installed, click on the Network dropdown menu, and on “add network”! You'll be redirected to the following page, where you'll need to fill in the Goerli Network and RPC URL info. Fill in the Goerli Network and RPC Url Add the following information to the form: Network name: Alchemy Goerli New RPC URL: the HTTP URL of the Goerli Alchemy Application Chain ID: 5 Currency Symbol: GoerliETH Block Explorer: https://goerli.etherscan.io Amazing, you just added Goerli to Metamask, using Alchemy! 🎉 It’s now time to deploy our Smart Contract on Goerli, but first, you'll need to get some Goerli Test ETH. Get Free Goerli Test ETH Getting Goerli Test ETH is super simple, just navigate to goerlifaucet.com , copy the wallet address into the text bar, and click on “Send Me ETH”: After 10-20 seconds you'll see the Goerli ETH appearing in the Metamask Wallet. You'll be able to get up to 0.1 ETH every 24 without logging in, or 0.5 with an Alchemy account. Now that you have the test ETH, it’s time to compile and deploy our NFT smart contract on the blockchain."
9,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"Compile and Deploy the NFT Smart Contract on the Goerli Testnet Back to Remix, let’s click on the compiler menu on the left-hand side of the page and click on The blue “Compile” button: Then click on the “Deploy and Run Transactions menu, click on the Environment dropdown menu and select “injected Web3”: Make sure the Metamask wallet is on the Alchemy Goerli network , select the NFT Smart contract from the Contract dropdown menu, and click on Deploy. A Metamask pop-up window will appear, click on ""sign"", and proceed to pay the gas fees. If everything worked as expected, after 10 seconds you should see the contract listed under Deployed Contracts: Now that the Smart contract is deployed on the Goerli testnet, it’s time to mint our NFTs, but first, you'll need to create and upload the metadata on IPFS, let’s understand what we mean by the term “metadata”. What is NFTs Metadata? For OpenSea to pull in off-chain metadata for ERC721 tokens, the contract will need to return a URI pointing to the hosted metadata . To find this URI, OpenSea, Rarible and other popular marketplaces will use the tokenURI method contained in the ERC721Uristorage standard . The tokenURI function in the ERC721 should return an HTTP or IPFS URL, such as ipfs://bafkreig4rdq3nvyg2yra5x363gdo4xtbcfjlhshw63we7vtlldyyvwagbq. When queried, this URL should return a JSON blob of data with the metadata for your token. You can read more about metadata standards on the official OpenSea documentation . How to Format Your NFT Metadata"
10,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"According to the OpenSea documentation, the NFT Metadata should be stored in a .json file and structured as follow: JSON { ""description"": ""YOUR DESCRIPTION"", ""external_url"": ""YOUR URL"", ""image"": ""IMAGE URL"", ""name"": ""TITLE"", ""attributes"": [ { ""trait_type"": ""Base"", ""value"": ""Starfish"" }, { ""trait_type"": ""Eyes"", ""value"": ""Big"" }, { ""trait_type"": ""Mouth"", ""value"": ""Surprised"" }, { ""trait_type"": ""Level"", ""value"": 5 }, { ""trait_type"": ""Stamina"", ""value"": 1.4 }, { ""trait_type"": ""Personality"", ""value"": ""Sad"" }, { ""display_type"": ""boost_number"", ""trait_type"": ""Aqua Power"", ""value"": 40 }, { ""display_type"": ""boost_percentage"", ""trait_type"": ""Stamina Increase"", ""value"": 10 }, { ""display_type"": ""number"", ""trait_type"": ""Generation"", ""value"": 2 }] } Here's a brief explanation of what each property stores: Property Explanation image This is the URL to the image of the item. Can be just about any type of image (including SVGs, which will be cached into PNGs by OpenSea), and can be IPFS URLs or paths."
11,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"We recommend using a 350 x 350 image. image_data Raw SVG image data, if you want to generate images on the fly (not recommended). Only use this if you're not including the image parameter. external_url: This is the URL that will appear below the asset's image on OpenSea and will allow users to leave OpenSea and view the item on your site. description A human-readable description of the item. Markdown is supported. name Name of the item attributes These are the attributes for the item, which will show up on the OpenSea page for the item. (see below) background_color Background color of the item on OpenSea. Must be six-character hexadecimal without a pre-pended animation_url A URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. Animation_url also supports HTML pages, allowing us to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more. Scripts and relative paths within the HTML page are now supported. However, access to browser extensions is not supported. youtube_url A URL to a YouTube video Now that we have a brief understanding of what will be contained in your tokens metadata, let's learn how to create it and store it on IPFS. Creating and Uploading the Metadata on IPFS First of all, navigate to filebase.com and create a new account."
12,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"Once logged in, click on the bucket button on the left-hand side menu, and create a new bucket: Navigate into the bucket, click on the upload button , and upload the image you want to use for your NFT, I’ll use the following ."
13,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"Once uploaded click on it and copy the IPFS Gateway URL: Using any text editor, paste the following JSON code: JSON { ""description"": ""This NFT proves I've created and deployed my first ERC20 smart contract on Goerli with Alchemy Road to Web3"", ""external_url"": ""Alchemy.com/?a=roadtoweb3weekone"", ""image"": ""https://ipfs.filebase.io/ipfs/bafybeihyvhgbcov2nmvbnveunoodokme5eb42uekrqowxdennt2qyeculm"", ""name"": ""A cool NFT"", ""attributes"": [ { ""trait_type"": ""Base"", ""value"": ""Starfish"" }, { ""trait_type"": ""Eyes"", ""value"": ""Big"" }, { ""trait_type"": ""Mouth"", ""value"": ""Surprised"" }, { ""trait_type"": ""Level"", ""value"": 5 }, { ""trait_type"": ""Stamina"", ""value"": 1.4 }, { ""trait_type"": ""Personality"", ""value"": ""Sad"" }, { ""display_type"": ""boost_number"", ""trait_type"": ""Aqua Power"", ""value"": 40 }, { ""display_type"": ""boost_percentage"", ""trait_type"": ""Stamina Increase"", ""value"": 10 }, { ""display_type"": ""number"", ""trait_type"": ""Generation"", ""value"": 2 }] } And save the file as ""metadata.json"". Move back to Filebase and upload the metadata.json file in the same bucket where we uploaded the Image."
14,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"Lastly, click on the CID and copy it, we’ll need it in the next part to build the token URI when minting out NFT: Mint Your Goerli NFT Go back to Remix and in the Deploy & Run Transactions menu, go under “deployed contracts” - and click on the contract we just deployed, it will open up a list of all the methods contained in your Smart contact: Orange methods are methods that actually write on the blockchain whereas Blue methods are methods learning from the blockchain. Click on the safeMint method dropdown icon and paste your address and the following string into the uri field: ipfs://\<your\_metadata\_cid> Clicking on transact will create a Metamask popup prompting you to pay the gas fees. Click on ""sign"" and go on minting your first NFT! Wait a couple of seconds and, to make sure the mint went through successfully, copy and paste your address in the balanceOf method input, and run it - it should show you have 1 NFT. Do the same with the tokenUri method, inserting “0” as the id argument - it should display your tokenURI. Great! You just minted your first NFT! 🎉 Now it’s time to move to OpenSea to check if the metadata begins to read. Visualize Your NFT on OpenSea Navigate to testnets.opensea.io and log in with your Metamask wallet . Then click on your profile picture, you should see your newly minted NFT there. If the image is not yet visible, click on it, and click on the “refresh metadata” button."
15,https://docs.alchemy.com/docs/how-to-develop-an-nft-smart-contract-erc721-with-alchemy,"Sometimes OpenSea has hard times recognizing testnet metadata - and could take up to 6 hours to see it. After some time your NFT should be visible as follow : Congratulations, you have successfully created, modified, and deployed your first smart contract. Minted your first NFT, and published your image on IPFS! 🔥 Next step? Why don’t you modify your smart contract to allow users to only mint only up to a certain number of NFTs? 5 per user should be enough, or someone might start minting thousands of NFTs! To do so, look into the mapping type, here there’s an amazing guide to walk you through it. Want the video version of this tutorial? Subscribe to the Alchemy YouTube channel and join our Discord community to find thousands of developers ready to help you out! We are always looking to improve this learning journey, please share any feedback you have with us! You can tweet at the community by tagging @AlchemyLearn , or you can suggest edits to this document by clicking on ""Suggest Edits"" in the top right. See you in the next challenge! Updated about 2 months ago ReadMe"
1,https://docs.alchemy.com/reference/alchemy-pendingtransactions,"The alchemy_pendingTransactions subscription type subscribes to pending transactions via WebSockets, and filters those transactions based on specified from and/or to addresses. The subscription will return either full transaction objects or just transaction hashes depending on the request. It will also optionally include re-orged or removed transactions if specified. Supported Networks Network Ethereum Polygon Optimism Arbitrum Astar alchemy_pendingTransactions Parameters fromAddress (optional): string or [ array of strings ] Singular address or array of addresses to receive pending transactions sent from this address. toAddress (optional): string or [ array of strings ] Singular address or array of addresses to receive pending transactions to this address hashesOnly (optional): boolean default value is false , where the response matches the payload of eth_getTransactionByHash . If set to true , the payload returned contains only the hashes of the transactions that are added to the pending state, which matches the payload of newPendingTransactions 📘 Note: Parameter Specification There is an address limit of 1k unique addresses (combination of fromAddress and toAddress lists) Excluding all parameters returns the transaction information for all transactions that are added to the pending state. If fromAddress and toAddress are both present, then this subscription will include transactions sent from the fromAddress OR received by the toAddress . Returns With hashesOnly = true result : [string] - transaction hash for pending transaction subscription : [string] - subscription ID With hashesOnly = false result - [object] A transaction object: blockHash : DATA , 32 Bytes - null when it's pending. blockNumber : QUANTITY - null when it's pending. from : DATA , 20 Bytes - address of the sender."
2,https://docs.alchemy.com/reference/alchemy-pendingtransactions,"gas : QUANTITY - gas provided by the sender. gasPrice : QUANTITY - gas price provided by the sender in Wei. hash : DATA , 32 Bytes - hash of the transaction. input : DATA - the data send along with the transaction. nonce : QUANTITY - the number of transactions made by the sender prior to this one. to : DATA , 20 Bytes - address of the receiver. null when it's a contract creation transaction. transactionIndex : QUANTITY - null when its pending. value : QUANTITY - value transferred in Wei. v : QUANTITY - ECDSA recovery id r : DATA , 32 Bytes - ECDSA signature r s : DATA , 32 Bytes - ECDSA signature s subscription - [string] subscription ID Request wscat alchemy-sdk // initiate websocket stream first wscat -c wss://eth-mainnet.g.alchemy.com/v2/demo // then call subscription {""jsonrpc"":""2.0"",""id"": 2, ""method"": ""eth_subscribe"", ""params"": [""alchemy_pendingTransactions"", {""toAddress"": [""0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"", ""0xdAC17F958D2ee523a2206206994597C13D831ec7""], ""hashesOnly"": false}]} // Installation: npm install alchemy-sdk import { Alchemy, Network, AlchemySubscription } from ""alchemy-sdk""; const settings = { apiKey: ""<-- ALCHEMY APP API KEY -->"", // Replace with your Alchemy API Key network: Network."
3,https://docs.alchemy.com/reference/alchemy-pendingtransactions,"ETH_MAINNET, // Replace with your network }; const alchemy = new Alchemy(settings); // Subscription for Alchemy's pendingTransactions API alchemy.ws.on( { method: AlchemySubscription.PENDING_TRANSACTIONS, fromAddress: ""0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"", // Replace with address to recieve pending transactions from this address toAddress: ""0xdAC17F958D2ee523a2206206994597C13D831ec7"", // Replace with address to send pending transactions to this address }, (tx) => console.log(tx) ); Result results {""id"":1,""result"":""0xf13f7073ddef66a8c1b0c9c9f0e543c3"",""jsonrpc"":""2.0""} { ""jsonrpc"": ""2.0"", ""method"": ""eth_subscription"", ""params"": { ""result"": { ""blockHash"": null, ""blockNumber"": null, ""from"": ""0x098bdcdc84ab11a57b7c156557dca8cef853523d"", ""gas"": ""0x1284a"", ""gasPrice"": ""0x6fc23ac00"", ""hash"": ""0x10466101bd8979f3dcba18eb72155be87bdcd4962527d97c84ad93fc4ad5d461"", ""input"": ""0xa9059cbb00000000000000000000000054406f1ec84f89532f83768f3f159b73b237257f0000000000000000000000000000000000000000000000000000000001c9c380"", ""nonce"": ""0x11"", ""to"": ""0xdac17f958d2ee523a2206206994597c13d831ec7"", ""transactionIndex"": null, ""value"": ""0x0"", ""type"": ""0x0"", ""v"": ""0x26"", ""r"": ""0x93ddd646056f365352f7e53dfe5dc81bde53f5b7c7bbe5deea555a62540d6995"", ""s"": ""0x79ed82a681930feb11eb68feccd1df2e53e1b96cf9171ae4ffcf53e9b2a40e8e"" }, ""subscription"": ""0xf13f7073ddef66a8c1b0c9c9f0e543c3"" } } ReadMe"
1,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"📘 API Endpoint This tutorial uses the alchemy_getAssetTransfers endpoint. If you just need the script for this tutorial refer to the below Recipe or continue reading for more 🔄 Script to Get Transaction History for an Address on Ethereum Open Recipe A few reasons for why you'd want to get address transaction history by an address: Displaying your a user’s full transaction history Querying an address's transactions filtered by smart contract interactions Analyzing a user's historical profit and loss Regardless of the different types of transaction history, you want to look up, this process can be extremely burdensome for developers to stitch together without the Alchemy Transfers API In this tutorial, we’ll be using Alchemy’s Transfers API to fetch all transactions sent from and sent to addresses you care about to create a complete picture of a user's transaction history. How to query transaction history When using the Transfers API for querying a user’s full on-chain history, it's important to have a few key parameters on hand. fromAddress : the address we want to see transaction information originating from toAddress : the address we want to see for recipient-based transactions fromBlock : the starting time range we want to fetch transactions over (defaults to latest ) toBlock : the ending time range we want to fetch transactions over (defaults to latest ) category : the type of transfer events we care about, in our case we want to see all transactions so we can simply let the param use its default argument of ["" external "", "" internal "", "" token ""]"
2,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"For transaction information that originates from your target sender address, use the fromAddress parameter within the Transfers API . For recipient-based transactions, use the toAddress parameter. 📘 Specify from AND to address If you want to get transactions that have a specific from and to address, you can specify the fromAddress and toAddress in your request. Example: Getting Transactions Originating From An Address 👍 No-Code Example For a no-code view of the API request check out the composer tool Alchemy SDK (Recommended) Alchemy's SDK allows us to more efficiently interact with Alchemy's endpoints and make JSON-RPC requests. github.com transfers_api_javascript_scripts/tx-history-from-alchemyweb3.js at main · alchemyplatform/transfers_api_javascript_scripts Ensure you are inside your project folder and type the following command in the terminal: Shell npm install alchemy-sdk 1. Create a file. In your current directory, create a new file called tx-history-from-alchemy-sdk.js Use your favorite file browser, code editor, or just directly in the terminal using the touch command like this: Shell touch tx-history-from-alchemy-sdk.js 2. Write script! Copy and paste the following code snippet into your new file: tx-history-from-alchemy-sdk.js tx-history-from-alchemy-sdk.js // Setup: npm install alchemy-sdk import { Alchemy, Network } from ""alchemy-sdk""; const config = { apiKey: ""<-- ALCHEMY APP API KEY -->"", network: Network."
3,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"ETH_MAINNET, }; const alchemy = new Alchemy(config); const data = await alchemy.core.getAssetTransfers({ fromBlock: ""0x0"", fromAddress: ""0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1"", category: [""external"", ""internal"", ""erc20"", ""erc721"", ""erc1155""], }); console.log(data); 3. Run script! Now, on your command line, you can execute the script by calling: Shell node tx-history-from-alchemy-sdk.js Node-Fetch If you're using node-fetch a lightweight, common module that brings the Fetch API to Node.js and allows us to make our HTTP requests, here's a code snipper for the request you'd make! github.com transfers_api_javascript_scripts/tx-history-from-axios.js at main · alchemyplatform/transfers_api_javascript_scripts 1. Create a file. In your current directory, create a new file called tx-history-from-fetch.js using your favorite file browser, code editor, or just directly in the terminal using the touch command like this: Shell touch tx-history-from-fetch.js 2. Write script!"
4,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"Copy and paste in the following code snippet into your new file: tx-history-from-fetch.js tx-history-from-fetch.js import fetch from 'node-fetch'; let data = JSON.stringify({ ""jsonrpc"": ""2.0"", ""id"": 0, ""method"": ""alchemy_getAssetTransfers"", ""params"": [ { ""fromBlock"": ""0x0"", ""fromAddress"": ""0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1"", } ] }); var requestOptions = { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: data, redirect: 'follow' }; const apiKey = ""demo"" const baseURL = `https://eth-mainnet.g.alchemy.com/v2/${apiKey}`; const fetchURL = `${baseURL}`; fetch(fetchURL, requestOptions) .then(response => response.json()) .then(response => JSON.stringify(response, null, 2)) .then(result => console.log(result)) .catch(error => console.log('error', error)); 3. Run script! Shell node tx-history-from-fetch.js Axios If you're using Javascript axios , a promise-based HTTP client for the browser and Node.js which allows us to make a raw request to the Alchemy API, here's a code snipper for the request you'd make! github.com transfers_api_javascript_scripts/tx-history-from-fetch.js at main · alchemyplatform/transfers_api_javascript_scripts 1. Create a file. In your current directory, create a new file called tx-history-from-axios.js using your favorite file browser, code editor, or just directly in the terminal using the touch command. Shell touch tx-history-from-axios.js 2. Write script!"
5,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"Copy and paste the following code snippet into your new file: tx-history-from-axios.js tx-history-from-axios.js import axios from 'axios'; let data = JSON.stringify({ ""jsonrpc"": ""2.0"", ""id"": 0, ""method"": ""alchemy_getAssetTransfers"", ""params"": [ { ""fromBlock"": ""0x0"", ""fromAddress"": ""0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1"", } ] }); var requestOptions = { method: 'post', headers: { 'Content-Type': 'application/json' }, data: data, }; const apiKey = ""demo"" const baseURL = `https://eth-mainnet.g.alchemy.com/v2/${apiKey}`; const axiosURL = `${baseURL}`; axios(axiosURL, requestOptions) .then(response => console.log(JSON.stringify(response.data, null, 2))) .catch(error => console.log(error)); 3. Run script! Now, on your command line, you can execute the script by calling: Shell node tx-history-from-axios.js Example: Getting Recipient-based Transactions 👍 No-code Example * For a no-code view of the API request check out the composer tool Alchemy SDK (Recommended) Alchemy's SDK allows us to more efficiently interact with Alchemy's endpoints and make JSON-RPC requests. github.com transfers_api_javascript_scripts/tx-history-to-alchemyweb3.js at main · alchemyplatform/transfers_api_javascript_scripts Ensure you are inside your project folder and type the following command in the terminal: Shell npm install alchemy-sdk 1."
6,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"Create a file In your current directory, create a new file called alchemy-sdk-transfers-to-script.js Use your favorite file browser, code editor, or just directly in the terminal using the touch command like this: Shell touch alchemy-sdk-transfers-to-script.js 2. Write script! Copy and paste in the following code snippet into your new file: alchemy-sdk-transfers-to-script.js alchemy-sdk-transfers-to-script.js // Setup: npm install alchemy-sdk import { Alchemy, Network } from ""alchemy-sdk""; const config = { apiKey: ""<-- ALCHEMY APP API KEY -->"", network: Network. ETH_MAINNET, }; const alchemy = new Alchemy(config); const data = await alchemy.core.getAssetTransfers({ fromBlock: ""0x0"", toAddress: ""0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1"", category: [""external"", ""internal"", ""erc20"", ""erc721"", ""erc1155""], }); console.log(data); 3. Run script! Now, on your command line, you can execute the script by calling: Shell node alchemy-sdk-transfers-to-script.js Node-Fetch If you're using node-fetch a lightweight, common module that brings the Fetch API to Node.js and allows us to make our HTTP requests, here's a code snipper for the request you'd make! github.com transfers_api_javascript_scripts/tx-history-to-fetch.js at main · alchemyplatform/transfers_api_javascript_scripts 1. Create a file. In your current directory, create a new file called fetch-transfers-to-script.js using your favorite file browser, code editor, or just directly in the terminal using the touch command like this: Shell touch fetch-transfers-to-script.js 2. Write script!"
7,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"Copy and paste in the following code snippet into your new file: fetch-transfers-to-script.js fetch-transfers-to-script.js import fetch from 'node-fetch'; let data = JSON.stringify({ ""jsonrpc"": ""2.0"", ""id"": 0, ""method"": ""alchemy_getAssetTransfers"", ""params"": [ { ""fromBlock"": ""0x0"", ""toAddress"": ""0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1"", } ] }); var requestOptions = { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: data, redirect: 'follow' }; const apiKey = ""demo"" const baseURL = `https://eth-mainnet.g.alchemy.com/v2/${apiKey}`; const fetchURL = `${baseURL}`; fetch(fetchURL, requestOptions) .then(response => response.json()) .then(response => JSON.stringify(response, null, 2)) .then(result => console.log(result)) .catch(error => console.log('error', error)); 3. Run script! Now, on your command line, you can execute the script by calling: Shell node fetch-transfers-from-script.js Axios If you're using Javascript axios , a promise-based HTTP client for the browser and Node.js which allows us to make a raw request to the Alchemy API, here's a code snipper for the request you'd make! github.com transfers_api_javascript_scripts/tx-history-to-axios.js at main · alchemyplatform/transfers_api_javascript_scripts 1. Create a file. In your current directory, create a new file called axios-transfers-to-script.js using your favorite file browser, code editor, or just directly in the terminal using the touch command."
8,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"Shell touch axios-transfers-to-script.js 2. Write script! Copy and paste the following code snippet into your new file: axios-transfers-to-script.js axios-transfers-to-script.js import axios from 'axios'; let data = JSON.stringify({ ""jsonrpc"": ""2.0"", ""id"": 0, ""method"": ""alchemy_getAssetTransfers"", ""params"": [ { ""fromBlock"": ""0x0"", ""toAddress"": ""0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1"", } ] }); var requestOptions = { method: 'post', headers: { 'Content-Type': 'application/json' }, data: data, }; const apiKey = ""demo"" const baseURL = `https://eth-mainnet.g.alchemy.com/v2/${apiKey}`; const axiosURL = `${baseURL}`; axios(axiosURL, requestOptions) .then(response => console.log(JSON.stringify(response.data, null, 2))) .catch(error => console.log(error)); 3. Run script! Now, on your command line, you can execute the script by calling: Shell node axios-transfers-to-script.js How to process the API response Now that we have made a query and can see the response, let's learn how to handle it. If you feel like jumping ahead and grabbing some pre-built code, choose a repo that matches your preferred library."
9,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"Alchemy SDK Parsing with Alchemy SDK Responses github.com transfers_api_javascript_scripts/tx-history-parsed-alchemyweb3.js at main · alchemyplatform/transfers_api_javascript_scripts Node-Fetch Parsing with Node-Fetch Responses github.com transfers_api_javascript_scripts/tx-history-parsed-fetch.js at main · alchemyplatform/transfers_api_javascript_scripts Axios Parsing with Axios Responses github.com transfers_api_javascript_scripts/tx-history-parsed-axios.js at main · alchemyplatform/transfers_api_javascript_scripts Raw API Response: Without parsing the response, we have a console log that looks as follows."
10,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"JSON { transfers: [ { blockNum: '0xb7389b', hash: '0xfde2a5157eda40b90514751f74e3c7314f452a41890b19a342ee147f5336dfd6', from: '0x5c43b1ed97e52d009611d89b74fa829fe4ac56b1', to: '0xe9b29ae1b4da8ba5b1de76bfe775fbc5e25bc69a', value: 0.245, erc721TokenId: null, erc1155Metadata: null, tokenId: null, asset: 'ETH', category: 'external', rawContract: [Object] }, ...... { blockNum: '0xcf5dea', hash: '0x701f837467ae3112d787ddedf8051c4996ea82914f7a7735cb3db2d805799286', from: '0x5c43b1ed97e52d009611d89b74fa829fe4ac56b1', to: '0x92560c178ce069cc014138ed3c2f5221ba71f58a', value: 152.89962568845024, erc721TokenId: null, erc1155Metadata: null, tokenId: null, asset: 'ENS', category: 'token', rawContract: [Object] }, { blockNum: '0xd14898', hash: '0x2f5d93a9db65548eb43794aa43698acd653e6b2df35c6028b8599a234f2c6dc0', from: '0x5c43b1ed97e52d009611d89b74fa829fe4ac56b1', to: '0x83abecf7204d5afc1bea5df734f085f2535a9976', value: 27579.060635486854, erc721TokenId: null, erc1155Metadata: null, tokenId: null, asset: 'PEOPLE', category: 'token', rawContract: [Object] } ] } Understanding API Response: blockNum : the block number where a transaction event occurred, in hex hash : the transaction hash of a transaction from : where the transaction originated from to : where ETH or another asset was transferred to value : the amount of ETH transferred erc721TokenId : the ERC721 token ID. null if not an ERC721 token transfer. erc1155Metadata : a list of objects containing the ERC1155 tokenId and value . null if not an ERC1155 transfer tokenId : the token ID for ERC721 tokens or other NFT token standards asset : ETH or the token's symbol."
11,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"null if not defined in the contract and not available from other sources. rawContract value : raw transfer value denominated in the relevant Ethereum token address : Ethereum token contract address decimal : contract decimal Printing out the asset and value Two of the many different response objects you may be interested in parsing are: asset and value . Let's walk through an example that parses the returned JSON object. Whether we're querying via alchemy web3 , axios , or node-fetch , we'll need to save the queried response object into a constant. Alchemy SDK (Recommended) Saving response objects with Alchemy SDK Alchemy SDK (Recommended) // Alchemy SDK const res = await alchemy.core.getAssetTransfers({ fromBlock: ""0x0"", toAddress: ""0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1"", category: [""external"", ""internal"", ""erc20"", ""erc721"", ""erc1155""], }) Node-Fetch Saving response objects with Node-Fetch Node-fetch // Node-Fetch fetch(fetchURL, requestOptions) .then((res) => { return res.json() }) .then((jsonResponse) => { //Print token name / asset value for (const events of jsonResponse.result.transfers) { console.log(""Token Transfer: "", events.value, "" "", events.asset); } }) .catch((err) => { // handle error console.error(err); }); Axios Saving response objects with Axios Axios // Axios const res = await axios(axiosURL, requestOptions); With our queried response object saved as a constant, we can now index through the transfers."
12,https://docs.alchemy.com/docs/how-to-get-transaction-history-for-an-address-on-ethereum,"In particular, the steps we take are: Loop through all transfers in the result Print each element's value and asset field JavaScript // Print token asset name and its associated value for (const events of res.data.result.transfers) { console.log(""Token Transfer: "", events.value, "" "", events.asset); } If you followed along, your response should look like the following: response Token Transfer: 0.5 ETH Token Transfer: 0.27 ETH Token Transfer: 9.90384 ETH Token Transfer: 0.07024968 ETH Token Transfer: 0.000447494250654841 ETH Token Transfer: null null Token Transfer: 0.075 ETH Token Transfer: 0.003 ETH Token Transfer: null BURN Token Transfer: 54 DAI Token Transfer: 12.5 GTC Token Transfer: 2 GTC Token Transfer: 0.42 ETH ........ Token Transfer: 0.588 WETH Token Transfer: null null Token Transfer: null null Token Transfer: 2.3313024 ETH Token Transfer: 0.0633910153108353 ETH Token Transfer: 0.0335 ETH Token Transfer: 2 GTC And that's it! You've now learned how to fetch transaction history for address on Ethereum. For more, check out the tutorial below: docs.alchemy.com Integrating Historical Transaction Data into your dApp If you enjoyed this tutorial for getting address transaction history on Ethereum, give us a tweet @AlchemyPlatform ! (Or give the author @crypt0zeke a shoutout!) Don't forget to join our Discord server to meet other blockchain devs, builders, and entrepreneurs! Updated 5 months ago ReadMe"
1,https://docs.alchemy.com/reference/nft-api-quickstart,"Don’t have an API key? Start using the NFT API in your app today. Get started for free Getting Started Instructions Follow along with the steps below to get started with the NFT API: Choose a package manager Set up your repo Choose a library Alchemy SDK (recommended) Javascript Fetch Javascript Axios 1. Choose a package manager (npm or yarn) For this guide, we will be using npm or yarn as our package manager to install either alchemy-sdk , fetch , or axios . npm To get started with npm , follow the documentation to install Node.js and npm for your operating system: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm yarn To get started with yarn , follow these steps: https://classic.yarnpkg.com/lang/en/docs/install 2. Set up your repo (npm or yarn) npm Open up a terminal, and from the command line, create a new repository to hold your quickstart scripts. We'll also initialize the repo as an npm project. Shell mkdir alchemy-nft-api cd alchemy-nft-api npm init --yes yarn Shell mkdir alchemy-nft-api cd alchemy-nft-api yarn init --yes 📘 Support Import Syntax Since we'll be using import syntax to load ES6 modules, add 'type': 'module' to your package.json file: // package.json { ... ""type"": ""module"" } See this discussion for more context. 3. Choose a Library Alchemy SDK ( Recommended ) You can install the alchemy-sdk-js module to easily interact with Alchemy APIs."
2,https://docs.alchemy.com/reference/nft-api-quickstart,"We highly recommend using the Alchemy SDK because you also get WebSocket support, retries, and other benefits without the complexity! For full documentation on alchemy-sdk-js , check the GitHub repo: github.com GitHub - alchemyplatform/alchemy-sdk-js Installation Run the following command to install alchemy-web3 with npm and yarn npm yarn npm install alchemy-sdk yarn add alchemy-sdk Demo Script github.com nft-api-javascript-scripts/alchemy-sdk-script.js at main · alchemyplatform/nft-api-javascript-scripts The demo script for the Alchemy SDK In your alchemy-nft-api directory, you can create a new file called alchemy-sdk-script.js using your favorite file browser, code editor, or just directly in the terminal using the touch command like this: Shell touch alchemy-sdk-script.js and then paste the following code snippet into the file: alchemy-sdk-script.js // This script demonstrates access to the NFT API via the Alchemy SDK. import { Network, Alchemy } from ""alchemy-sdk""; // Optional Config object, but defaults to demo api-key and eth-mainnet. const settings = { apiKey: ""demo"", // Replace with your Alchemy API Key. network: Network. ETH_MAINNET, // Replace with your network."
3,https://docs.alchemy.com/reference/nft-api-quickstart,"}; const alchemy = new Alchemy(settings); // Print owner's wallet address: const ownerAddr = ""vitalik.eth""; console.log(""fetching NFTs for address:"", ownerAddr); console.log(""...""); // Print total NFT count returned in the response: const nftsForOwner = await alchemy.nft.getNftsForOwner(""vitalik.eth""); console.log(""number of NFTs found:"", nftsForOwner.totalCount); console.log(""...""); // Print contract address and tokenId for each NFT: for (const nft of nftsForOwner.ownedNfts) { console.log(""===""); console.log(""contract address:"", nft.contract.address); console.log(""token ID:"", nft.tokenId); } console.log(""===""); // Fetch metadata for a particular NFT: console.log(""fetching metadata for a Crypto Coven NFT...""); const response = await alchemy.nft.getNftMetadata( ""0x5180db8F5c931aaE63c74266b211F580155ecac8"", ""1590"" ); // Uncomment this line to see the full api response: // console.log(response); // Print some commonly used fields: console.log(""NFT name: "", response.title); console.log(""token type: "", response.tokenType); console.log(""tokenUri: "", response.tokenUri.gateway); console.log(""image url: "", response.rawMetadata.image); console.log(""time last updated: "", response.timeLastUpdated); console.log(""===""); From your command line, you can execute the script with: Shell node alchemy-sdk-script.js You should see output like this: Shell node alchemy-sdk-script.js  ✔  4s fetching NFTs for address: vitalik.eth ... number of NFTs found: 516 ... === contract address: 0x000386e3f7559d9b6a2f5c46b4ad1a9587d59dc3 token ID: 29 === contract address: 0x000386e3f7559d9b6a2f5c46b4ad1a9587d59dc3 token ID: 238 === ........... === fetching metadata for a Crypto Coven NFT..."
4,https://docs.alchemy.com/reference/nft-api-quickstart,"NFT name: balsa vault token type: ERC721 tokenUri: https://alchemy.mypinata.cloud/ipfs/QmaXzZhcYnsisuue5WRdQDH6FDvqkLQX1NckLqBYeYYEfm/1590.json image url: https://cryptocoven.s3.amazonaws.com/a7875f5758f85544dcaab79a8a1ca406.png time last updated: 2022-06-23T06:48:33.229Z === For full documentation on the available endpoints for alchemy-sdk , check the github repo: github.com GitHub - alchemyplatform/alchemy-sdk-js Javascript Fetch node-fetch is a lightweight, common module that brings the Fetch API to Node.js and allows us to make our HTTP requests. See the documentation for more info: https://www.npmjs.com/package/node-fetch Installation Run the following command to install node-fetch with npm and yarn npm yarn npm install node-fetch yarn add node-fetch Demo Script github.com nft-api-javascript-scripts/fetch-script.js at main · alchemyplatform/nft-api-javascript-scripts In your alchemy-nft-api directory, you can create a new file called fetch-script.js using your favorite file browser, code editor, or just directly in the terminal using the touch command like this: fetch-script.js touch fetch-script.js and then paste the following code snippet in to explore the getNFTs or getNFTMetadata methods: fetch-script.js (getNFTs) fetch-script.js (getNFTMetadata) // alchemy-nft-api/fetch-script.js import fetch from 'node-fetch'; // Setup request options: var requestOptions = { method: 'GET', redirect: 'follow' }; // Replace with your Alchemy API key: const apiKey = ""demo""; const baseURL = `https://eth-mainnet.g.alchemy.com/nft/v2/${apiKey}/getNFTs/`; // Replace with the wallet address you want to query: const ownerAddr"
5,https://docs.alchemy.com/reference/nft-api-quickstart,"= ""0xF5FFF32CF83A1A614e15F25Ce55B0c0A6b5F8F2c""; const fetchURL = `${baseURL}?owner=${ownerAddr}`; // Make the request and print the formatted response: fetch(fetchURL, requestOptions) .then(response => response.json()) .then(response => JSON.stringify(response, null, 2)) .then(result => console.log(result)) .catch(error => console.log('error', error)); import fetch from 'node-fetch'; var requestOptions = { method: 'GET', redirect: 'follow' }; const apiKey = ""demo"" const baseURL = `https://eth-mainnet.g.alchemy.com/nft/v2/${demo}/getNFTMetadata`; const contractAddr = ""0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d""; const tokenId = ""2""; const tokenType = ""erc721""; const fetchURL = `${baseURL}?contractAddress=${contractAddr}&tokenId=${tokenId}&tokenType=${tokenType}`; fetch(fetchURL, requestOptions) .then(response => response.json()) .then(response => JSON.stringify(response, null, 2)) .then(result => console.log(result)) .catch(error"
6,https://docs.alchemy.com/reference/nft-api-quickstart,"=> console.log('error', error)); From your command line, you can execute the script with: Shell node fetch-script.js Your output should look like the following: getNFTs getNFTMetadata { ""ownedNfts"": [ { ""contract"": { ""address"": ""0x0beed7099af7514ccedf642cfea435731176fb02"" }, ""id"": { ""tokenId"": ""0x000000000000000000000000000000000000000000000000000000000000001c"" }, ""balance"": ""1"" }, ...... }, { ""contract"": { ""address"": ""0xc4c377565a4b9eb6e657c2422bd33b6e4859b041"" }, ""id"": { ""tokenId"": ""0x01"" }, ""balance"": ""1"" } ], ""totalCount"": 12, ""blockHash"": ""0x470e52bdaffff978b4a89b2cfb2b8a3f92ec523bffb4bdb3d9b656ff8be57f8d"" } { ""contract"": { ""address"": ""0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"" }, ""id"": { ""tokenId"": ""2"", ""tokenMetadata"": { ""tokenType"": ""ERC721"" } }, ""title"": """", ""description"": """", ""tokenUri"": { ""raw"": ""ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/2"", ""gateway"": ""https://ipfs.io/ipfs/QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/2"" }, ""media"": [ { ""uri"": { ""raw"": ""ipfs://QmcJYkCKK7QPmYWjp4FD2e3Lv5WCGFuHNUByvGKBaytif4"", ""gateway"": ""https://ipfs.io/ipfs/QmcJYkCKK7QPmYWjp4FD2e3Lv5WCGFuHNUByvGKBaytif4"" } } ], ""metadata"": { ""image"": ""ipfs://QmcJYkCKK7QPmYWjp4FD2e3Lv5WCGFuHNUByvGKBaytif4"", ""attributes"": [ { ""value"": ""3d"", ""trait_type"": ""Eyes"" }, { ""value"": ""Bored Cigarette"", ""trait_type"": ""Mouth"" }, { ""value"": ""Robot"", ""trait_type"": ""Fur"" }, { ""value"": ""Sea Captain's Hat"", ""trait_type"": ""Hat"" }, { ""value"": ""Aquamarine"", ""trait_type"": ""Background"" } ] }, ""timeLastUpdated"": ""2022-02-01T00:30:04.643Z"" } Javascript Axios axios is a promise-based HTTP client for the browser and Node.js, which allows us to make a raw request to the Alchemy API."
7,https://docs.alchemy.com/reference/nft-api-quickstart,"See the documentation for more info: https://www.npmjs.com/package/axios Installation Run the following command to install axios with npm and `yarn npm yarn npm install axios yarn add axios Demo Script github.com nft-api-javascript-scripts/axios-script.js at main · alchemyplatform/nft-api-javascript-scripts In your alchemy-nft-api directory, you can create a new file called axios-script.js using your favorite file browser, code editor, or just directly in the terminal using the touch command. Shell touch axios-script.js and then paste the following code snippet in to explore the getNFTs or getNFTMetadata methods: axios-script.js (getNFTs) axios-script.js (getNFTMetadata) // alchemy-nft-api/axios-script.js import axios from 'axios'; // Replace with your Alchemy API key: const apiKey = ""demo""; const baseURL = `https://eth-mainnet.g.alchemy.com/nft/v2/${apiKey}/getNFTs/`; // Replace with the wallet address you want to query for NFTs: const ownerAddr = ""0xF5FFF32CF83A1A614e15F25Ce55B0c0A6b5F8F2c""; // Construct the axios request: var config = { method: 'get', url: `${baseURL}?owner=${ownerAddr}` }; // Make the request and print the formatted response: axios(config) .then(response => console.log(JSON.stringify(response.data, null, 2))) .catch(error"
8,https://docs.alchemy.com/reference/nft-api-quickstart,"=> console.log(error)); import axios from 'axios'; // replace with your Alchemy api key const apiKey = ""demo""; const baseURL = `https://eth-mainnet.g.alchemy.com/nft/v2/${apiKey}/getNFTMetadata`; const contractAddr = ""0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d""; const tokenId = ""2""; const tokenType = ""erc721""; var config = { method: 'get', url: `${baseURL}?contractAddress=${contractAddr}&tokenId=${tokenId}&tokenType=${tokenType}`, headers: { } }; axios(config) .then(response => console.log(JSON.stringify(response.data, null, 2))) .catch(error => console.log(error)); From your command line, you can execute the script with: Shell node axios-script.js"
9,https://docs.alchemy.com/reference/nft-api-quickstart,"Your output should look like the following: getNFTs getNFTMetadata alchemy-nft-api % node axios-script.js { ""ownedNfts"": [ { ""contract"": { ""address"": ""0x049aba7510f45ba5b64ea9e658e342f904db358d"" }, ""id"": { ""tokenId"": ""0x3651c7a73d3eea6a637f10a28ad1d8d296223e321b06626b2b4eac48eef4af4e"" }, ""balance"": ""1"" }, ... { ""contract"": { ""address"": ""0xf3e778f839934fc819cfa1040aabacecba01e049"" }, ""id"": { ""tokenId"": ""0x00000000000000000000000000000000000000000000000000000000000060ed"" }, ""balance"": ""1"" } ], ""totalCount"": 36, ""blockHash"": ""0x282c0c43a9eb14c0c42d72c3102421c76af27d9afa7f79cee595c4fec9e63535"" } { ""contract"": { ""address"": ""0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"" }, ""id"": { ""tokenId"": ""2"", ""tokenMetadata"": { ""tokenType"": ""ERC721"" } }, ""title"": """", ""description"": """", ""tokenUri"": { ""raw"": ""ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/2"", ""gateway"": ""https://ipfs.io/ipfs/QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/2"" }, ""media"": [ { ""uri"": { ""raw"": ""ipfs://QmcJYkCKK7QPmYWjp4FD2e3Lv5WCGFuHNUByvGKBaytif4"", ""gateway"": ""https://ipfs.io/ipfs/QmcJYkCKK7QPmYWjp4FD2e3Lv5WCGFuHNUByvGKBaytif4"" } } ], ""metadata"": { ""image"": ""ipfs://QmcJYkCKK7QPmYWjp4FD2e3Lv5WCGFuHNUByvGKBaytif4"", ""attributes"": [ { ""value"": ""3d"", ""trait_type"": ""Eyes"" }, { ""value"": ""Bored Cigarette"", ""trait_type"": ""Mouth"" }, { ""value"": ""Robot"", ""trait_type"": ""Fur"" }, { ""value"": ""Sea Captain's Hat"", ""trait_type"": ""Hat"" }, { ""value"": ""Aquamarine"", ""trait_type"": ""Background"" } ] }, ""timeLastUpdated"": ""2022-02-01T00:30:04.643Z"" } ReadMe"
1,https://docs.alchemy.com/reference,"ReadMe Don’t have an API key? Unlock millions of requests and free archive data on all chains. Get started for free APIs for Web3 Use Cases Alchemy’s Enhanced API offering is built to optimize your code and make life as a developer way easier. Check out all Enhanced APIs on the Enhanced APIs Overview page. NFT API Instantly find, verify, and display any NFT, across all major blockchains. Learn more Token API Easily request information about specific tokens like metadata or wallet balances. Learn more Transfers API Fetch historical transactions for any address in one request. Learn more Transact API Suite of APIs built to make your transactions more secure, transparent, and faster. Learn more Trace API Trace API methods give you access to the most detailed information about on-chain activity. Learn more Debug API Get more detailed information and data on transaction behavior. Learn more Transactions Receipts Get all transaction receipts for a given block by number or block hash. Learn more Real-time Event Streams If you're looking to integrate real-time events into your application check out the following API docs for WebSockets and Webhooks: Subscription API Quickstart WebSockets Learn more Notify API Quickstart Webhooks Learn more Supported Chains Alchemy supports both EVM and non-EVM chains, view API references below: Ethereum Polygon PoS Optimism Arbitrum Astar Solana Polygon zkEVM Starknet Alchemy SDK The easiest way to connect your dApp to the blockchain and get the power of Alchemy's infrastructure. Just download, write two lines of code, and go. Quickstart Guide ReadMe"
1,https://docs.alchemy.com/recipes,ReadMe
1,https://docs.alchemy.com/reference/alchemy-getassettransfers,"Type of Transfer Ethereum Mainnet, Goerli Polygon Mainnet, Mumbai Arbitrum Mainnet, Goerli Optimism Mainnet, Goerli external internal erc20 erc721 erc1155 specialnft 📘 Types of Transfers To learn more about the different types of transfer events check out the Transfers API Quickstart Guide . Shell JavaScript Python Base URL https:// eth-mainnet .g.alchemy.com/v2 /{apiKey} Click Try It! to start a request and see the response here! ReadMe"
1,https://docs.alchemy.com#content,"The web3 developer hub View API References, guides, and tutorials for Ethereum, Polygon, Optimism, Arbitrum, Solana and Astar. View docs NFT API docs... dive into resources Most popular NFT API Quickstart Easiest way to get NFT data from ownership to sales to metadata and more. Ethereum API Quickstart How to get started building on Ethereum and using the JSON-RPC API. SDK Quickstart The easiest way to connect your dApp to the blockchain using JavaScript. alchemy_pendingTransactions Subscribe to full transaction objects or hashes that are pending based on provided filters. What are payable functions in Solidity? Learn how payable functions work in Solidity. How to get all NFTs owned by an address Query all NFTs owned by a provided address in one line of code. Learn how to build in web3 Alchemy University Ethereum Developer Bootcamp and JavaScript Fundamentals Courses, for free. Create Web3 Dapp Create a full-stack dApp in ~4 mins, right from the command-line. View all tutorials Web3 tutorials for all topics: NFTs, Solidity, DeFI, transactions, and more! API references for all chains Including free Archive data on all chains and testnets. Ethereum Polygon PoS Arbitrum Optimism Solana Astar Polygon ZKEVM Starknet Use case APIs APIs built to optimize your code and make life as a developer way easier."
2,https://docs.alchemy.com#content,"View all APIs NFT API Get all the NFT data you need with this suite of endpoints Transact Send transactions 7.9x faster Token API Get token valuable information to display to users Transfers API Get historical transactions for any address or contract Notify API Webhooks for transaction activity Trace API Deep insights for transaction processing Trusted by the best in the industry Community Driven Join the web3 developer community Get help with your product, meet other developers, and get access to a world-class community ReadMe"
1,https://docs.alchemy.com/reference/transfers-api-quickstart,"To use the Transfers API you'll need to create a free Alchemy account first! Transfers API Methods Method Ethereum Mainnet, Goerli Polygon Mainnet, Mumbai Arbitrum Mainnet, Goerli Optimism Mainnet, Goerli Solana Astar alchemy_getAssetTransfers NOTE: see the table below for the types of transfers supported by each network What are Transfers? Transfers are a representation of value being exchanged between two accounts. Often times users wish to see the historical transactions associated with a specific account or address. This is currently an extremely challenging and inefficient task, requiring users to scan the entire blockchain and index everything to search for transactions associated with the desired address. However, with the Transfers API users can query all types of historical transactions for a given address in a single request. What's an Example Use Case for Transfers? An example use case for the requesting transfer events would be integrating historical transaction data into your dApp. For instructions on how to do this check out this tutorial on Integrating Historical Transaction Data into your dApp . What networks does the Transfers API support? For a feature matrix for types of transfers supported on each network check out Types of Transfers . Types of Transfers There are five main types of transfers that are captured when using this API. See below for the types of transfers supported on each network. Type of Transfer Ethereum Mainnet, Goerli Polygon Mainnet, Mumbai Arbitrum Mainnet, Goerli Optimism Mainnet, Goerli external internal Mainnet only erc20 erc721 erc1155 specialnft 1. External Eth Transfers These are top level transactions that occur with a from address being an external (user created) address."
2,https://docs.alchemy.com/reference/transfers-api-quickstart,"External addresses have private keys and are accessed by users. 2. ERC20 Transfers Event logs for ERC20 transfers. 3. ERC721 Transfers Event logs for ERC721 transfers. 4. ERC1155 Transfers These are event logs for ERC1155 transfers. 5. Internal Eth Transfers These are transfers that occur where the fromAddress is an internal (smart contract) address. (ex: a smart contract calling another smart contract or smart contract calling another external address). For a full deep dive into internal transfers check out this article on What are Internal Transactions? . 📘 Note on Internal Transfers For efficiency, we do not return internal transfers with 0 value as they don't provide useful information without digging deeper into the internal transaction itself. If you are interested in these type of events see our Trace API . Additionally, we do not include any internal transfers with call type delegatecall because although they have a value associated with them they do not actually transfer that value (see Appendix H of the Ethereum Yellow Paper if you're curious). We also do not include miner rewards as an internal transfer. 6. Special NFT Transfers The special NFT endpoint allows users to query for NFTs that don't follow any ERC standards. The 2 included NFTs currently are CryptoPunks and CryptoKitties, which both predate current NFT standards. Pagination There are two cases in which pagination will be required: If you have a specific number of responses that you want to receive in a given payload If you receive a response with more than 1000 results."
3,https://docs.alchemy.com/reference/transfers-api-quickstart,"In the first case, you should use the maxCount parameter in your request to specify the number of responses you wish to receive. If there are more results than specified in maxCount , you will receive a value for pageKey in your result which you should use to fetch the next response load by putting the returned pageKey value in the pageKey parameter of your next request. Continue to do so until a pageKey is no longer returned (meaning you've fetched all the results). In the second case, you will also receive a value for pageKey in the response, which you should use to fetch the next 1000 (or however many is left) by putting the returned pageKey value in the pageKey parameter of your next request. 🚧 NOTE: Each page key has a TTL (Time to Live) of 10 minutes so if you receive a response with a pageKey value you must send the next request (with the pageKey ) within the 10 minute window, otherwise you will have to restart the entire request cycle. How to get timestamps for a transaction? A transaction object will have a block number associated with it, the block number is the blockchain's measure of time, however, if you want a standard timestamp you can easily get that by specifying withMetadata=true in your alchemy_getAssetTransfers request, or make a second call to eth_getBlockByNumber , passing in the blockNum field from the alchemy_getAssetTransfers response payload. 📘 Understanding Block Timestamps Surprisingly, a block's timestamp is actually the time that the previous block was mined not the block that the timestamp is contained within."
4,https://docs.alchemy.com/reference/transfers-api-quickstart,"So for Ethereum Mainnet, blocks tend to actually be mined around 14 seconds after their timestamps. How are transactions ordered? By default the Transfers API returns transactions in ascending order so from oldest --> newest transactions. However if you wish to change the order to be from newest --> oldest transactions you can do so by specifying the order parameter to desc . Why does my ERC721 transfer have 0 value? There are typically two transfers that happen with NFTs: The transfer of the token from the previous owner to the new owner The purchase or sale of the NFT token (the transfer of value between the new and previous owner) ERC721 token transfers only capture the first type of transfer (token) not the second type (sale). If you want to see the second type and the transaction was made in ETH you'll need to include external transfer types in your request. If the transaction was made in another erc20 token you should include erc20 transfer types in your request. What are the different types of block tags? There are 2 different types of Block tags useful in the toBlock field of getAssetTransfers latest - This refers to the latest block that was mined on the blockchain you're querying i.e. the current head of the blockchain indexed - This tag returns transfers data from our cache which may not be up-to-date with the latest block mined on chain. This is useful in case of network fork or partial outage and your application can tolerate some lag ReadMe"
1,https://docs.alchemy.com/docs/how-to-get-all-nfts-owned-by-an-address,"📘 API Endpoint This tutorial uses the getNFTs endpoint. If you just need the script for this tutorial refer to the below Recipe or continue reading for more 🖼️ Script to Get All NFTs Owned by an Address Open Recipe If you're building a wallet , an NFT marketplace like OpenSea, or a Building a dApp with Real-Time Transaction Notifications , chances are that you will need to list all NFTs owned by a user as well as information about the NFTs themselves (such as name, description, traits, etc.) NFT gallery showing multiple NFTs including Degen Apes, Bored Ape Yacht Club (BAYC), Mekaverse, and Degen Trash Pandas. To get all NFTs owned by a user on a blockchain like Ethereum or Polygon, you would have to parse the entire blockchain since genesis, track all ERC-721 and ERC-1155 contracts, and track the latest ownership status of every NFT. This requires a massive amount of engineering resources and time. However, it is possible to bypass this effort by using Alchemy's NFT API . In this tutorial, you will use the Alchemy NFT API to get all NFTs owned by a wallet address. 📘 If you are new, read the NFT API Quickstart Guide to learn how the NFT API works. About This Tutorial You will write a simple script in Node.js to get the top 100 NFTs owned by a wallet on Ethereum. This will be achieved using a free Alchemy developer account and the NFT API. Creating the NFT Ownership Script Step 1: Install Node and npm"
2,https://docs.alchemy.com/docs/how-to-get-all-nfts-owned-by-an-address,"In case you haven't already, install node and npm on your local machine. Make sure that node is at least v14 or higher by typing the following in your terminal: Shell node -v Step 2: Create a new Alchemy app In case you haven't already, sign up for a free Alchemy account . Alchemy dashboard where NFT developers can easily create a new app on a specific blockchain and network. Next, navigate to the Alchemy Dashboard and create a new app. Make sure you set the chain to Ethereum and network to Mainnet. Once the app is created: click on your app's View Key button on the dashboard take a note of the API Key (e.g. 54gYyVG14f........................ ) You will need this API Key later. Step 3: Create a Node project Next, create an empty repository and install all node dependencies. To make requests to the NFT API, we recommend using the Alchemy API Overview Alternatively, you can use axios or fetch . Alchemy SDK (Recommended) Axios Fetch mkdir nft-ownership && cd nft-ownership npm init -y npm install --save alchemy-sdk touch main.js mkdir nft-ownership && cd nft-ownership npm init -y npm install --save axios touch main.js mkdir nft-ownership && cd nft-ownership npm init -y touch main.js This will create a repository named nft-ownership that holds all the files and dependencies. Open this repo in your favorite code editor. You will be writing all your code in the main.js file."
3,https://docs.alchemy.com/docs/how-to-get-all-nfts-owned-by-an-address,"Step 4: Get all NFTs owned by an address To get all NFTs owned by an address, use the getNFTsForOwner method. The getNFTsForOwner method takes in one required argument: owner : The wallet address of which we want to get NFT ownership data. By default, the getNFTsForOwner method returns metadata of the NFTs. We are going to stick with this default behavior. You can also restrict the NFT collections by passing in an array of contractAddresses[] and filtering out NFTs that have been classified as spam using the filter argument. For more information on this, check out the NFT API FAQ . Add the following code to the main.js file: Alchemy SDK (Recommended) Axios Fetch // Setup: npm install alchemy-sdk import { Alchemy, Network } from ""alchemy-sdk""; const config = { apiKey: ""<-- ALCHEMY APP API KEY -->"", network: Network. ETH_MAINNET, }; const alchemy = new Alchemy(config); const main = async () => { // Get all NFTs const nfts = await alchemy.nft.getNftsForOwner(""elanhapern.eth""); // Print NFTs console.log(nfts); }; const runMain = async () => { try { await main(); process.exit(0); } catch (error) { console.log(error); process.exit(1); } }; runMain(); const axios = require('axios') // Wallet address const address = 'elanhalpern.eth' //"
4,https://docs.alchemy.com/docs/how-to-get-all-nfts-owned-by-an-address,"Alchemy URL const baseURL = `<-- ALCHEMY APP HTTP URL -->`; const url = `${baseURL}/getNFTs/?owner=${address}`; const config = { method: 'get', url: url, }; // Make the request and print the formatted response: axios(config) .then(response => console.log(response['data'])) .catch(error => console.log('error', error)); import fetch from 'node-fetch'; const baseURL = ""<-- ALCHEMY APP HTTP URL -->""; const address = ""elanhalpern.eth""; const url = `${baseURL}/getNFTs/?owner=${address}`; var requestOptions = { method: 'get', redirect: 'follow' }; fetch(url, requestOptions) .then(response => response.json()) .then((data) => console.log(data)) .catch(error => console.log('error', error)) Run this script by typing: Shell node main.js You should then see an output that looks something like this: output { ""ownedNfts"": [ { ""contract"": { ""address"": ""0x0beed7099af7514ccedf642cfea435731176fb02"" }, ""id"": { ""tokenId"": ""28"", ""tokenMetadata"": { ""tokenType"": ""ERC721"" } }, ""title"": ""DuskBreaker #28"", ""description"": ""Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology."
5,https://docs.alchemy.com/docs/how-to-get-all-nfts-owned-by-an-address,""", ""tokenUri"": { ""raw"": ""https://duskbreakers.gg/api/breakers/28"", ""gateway"": ""https://duskbreakers.gg/api/breakers/28"" }, ""media"": [ { ""raw"": ""https://duskbreakers.gg/breaker_images/28.png"", ""gateway"": ""https://duskbreakers.gg/breaker_images/28.png"" } ], ""metadata"": { ""name"": ""DuskBreaker #28"", ""description"": ""Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology. "", ""image"": ""https://duskbreakers.gg/breaker_images/28.png"", ""external_url"": ""https://duskbreakers.gg"", ""attributes"": [ { ""value"": ""Locust Rider Armor (Red)"", ""trait_type"": ""Clothes"" }, ...... { ""value"": ""Big Smile (Purple)"", ""trait_type"": ""Mouth"" }, { ""value"": ""Yellow"", ""trait_type"": ""Background"" } ] }, ""timeLastUpdated"": ""2022-02-16T22:52:54.719Z"" }, ...... ], ""totalCount"": 6, ""blockHash"": ""0xeb2d26af5b6175344a14091777535a2cb21c681665a734a8285f889981987630"" } 📘 You get all the metadata about the NFTs in the same request. This data can be parsed and displayed on your web3 frontend with ease. If the address owns more than 100 NFTs, the response will contain a pageKey key-value pair. Use this key to issue another request to getNFTs with pageKey as another argument to owner ."
6,https://docs.alchemy.com/docs/how-to-get-all-nfts-owned-by-an-address,"This will return the next 100 NFTs owned by the user. You can repeat this process until you reach the end of the wallet's collection. For more information, check out the NFT API docs. Step 5: Parse the NFT API output The response you received in the previous step is not human-readable. Let's parse the API output to show only the titles of the NFTs owned by a wallet. Replace the contents of main.js with the following: Alchemy SDK Axios Fetch // Setup: npm install alchemy-sdk import { Alchemy, Network } from ""alchemy-sdk""; const config = { apiKey: ""<-- ALCHEMY APP API KEY -->"", network: Network. ETH_MAINNET, }; const alchemy = new Alchemy(config); const main = async () => { // Wallet address const address = ""elanhalpern.eth""; // Get all NFTs const nfts = await alchemy.nft.getNftsForOwner(address); // Parse output const numNfts = nfts[""totalCount""]; const nftList = nfts[""ownedNfts""]; console.log(`Total NFTs owned by ${address}: ${numNfts} \n`); let i = 1; for (let nft of nftList) { console.log(`${i}. ${nft.title}`); i++; } }; const axios = require('axios') // Wallet address const address = 'elanhalpern.eth' //"
7,https://docs.alchemy.com/docs/how-to-get-all-nfts-owned-by-an-address,"Alchemy URL const baseURL = `<-- ALCHEMY APP HTTP URL -->`; const url = `${baseURL}/getNFTs/?owner=${address}`; const config = { method: 'get', url: url, }; // Make the request and print the formatted response: axios(config) .then(response => { const nfts = response['data']; // Parse output const numNfts = nfts['totalCount']; const nftList = nfts['ownedNfts']; console.log(`Total NFTs owned by ${address}: ${numNfts} \n`); let i = 1; for (nft of nftList) { console.log(`${i}. ${nft['metadata']['name']}`) i++; } }) .catch(error => console.log('error', error)); import fetch from 'node-fetch'; const baseURL = ""<-- ALCHEMY APP HTTP URL -->""; const address = ""elanhalpern.eth""; const url = `${baseURL}/getNFTs/?owner=${address}`; var requestOptions = { method: 'get', redirect: 'follow' }; fetch(url, requestOptions) .then(response => { const nfts = response['data']; // Parse output const numNfts = nfts['totalCount']; const nftList = nfts['ownedNfts']; console.log(`Total NFTs owned by ${address}: ${numNfts} \n`); let i = 1; for (nft of nftList) { console.log(`${i}. ${nft['metadata']['name']}`) i++; } }) .catch(error => console.log('error', error)) Run the script using: Shell node main.js"
8,https://docs.alchemy.com/docs/how-to-get-all-nfts-owned-by-an-address,"You should obtain an output that looks like this: Total NFTs owned by elanhalpern.eth: 18 1. DuskBreaker #9 2. Dev #6881 3. WAW #1878 4. You #1546 5. Super Fat Ape #570 6. Runner #3429 7. cryptocreamery.eth 8. elanhalpern.eth 9. BFF Friendship Bracelet 10. BFF Friendship Bracelet 11. CityDAO Citizen 12. #4842 13. MAVION #1002 14. Shackled Genesis #622 15. Runner #3429 16. Squirrelly Squirrel #245 17. Founding BFF Friendship Bracelets 18. MAVION Gems - The OG Conclusion Congratulations! You now know how to use the Alchemy NFT API to get all NFTs owned by a user on a blockchain (whether that be Ethereum or Polygon). If you enjoyed this tutorial on how to get all NFTs owned by an address, tweet us at @AlchemyPlatform and give the authors @rounak_banik and @ankg404 a shoutout! Don't forget to join our Discord server to meet other blockchain devs, builders, and entrepreneurs! Ready to start using the Alchemy NFT API? Create a free Alchemy account and do share your project with us! Updated about 2 months ago ReadMe"
1,https://docs.alchemy.com/reference/optimism-api-quickstart,"Don’t have an API key? Sign up to start building on Optimism Get started for free Getting Started Instructions 1. Choose a package manager (npm or yarn) For this guide, we will be using npm or yarn as our package manager to install either alchemy-sdk or any other packages. npm To get started with npm , follow the documentation to install Node.js and npm for your operating system: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm yarn To get started with yarn , follow these steps: https://classic.yarnpkg.com/lang/en/docs/install 2. Set up your project (npm or yarn) Shell (npm) Shell (yarn) mkdir alchemy-optimism-api cd alchemy-optimism-api npm init --yes mkdir alchemy-optimism-api cd alchemy-optimism-api yarn init --yes 3. Install Alchemy-SDK Run the following command to install the Alchemy SDK with npm or yarn. npm yarn npm install alchemy-sdk yarn add alchemy-sdk 4. Make your first request You are all set now to use Optimism API and make your first request. For instance, lets make a request to get latest block . Create an index.js file and paste the following code snippet into the file. index.js const { Network, Alchemy } = require(""alchemy-sdk""); // Optional Config object, but defaults to demo api-key and eth-mainnet. const settings = { apiKey: ""demo"", // Replace with your Alchemy API Key. network: Network. OPT_MAINNET, // Replace with your network."
2,https://docs.alchemy.com/reference/optimism-api-quickstart,"}; const alchemy = new Alchemy(settings); async function main() { const latestBlock = await alchemy.core.getBlockNumber(); console.log(""The latest block number is"", latestBlock); } main(); 5. Run script To run the above node script, use cmd node index.js , and you should see the output. shell The latest block number is 43869847 Optimism Tutorials You must not stop here! Want to build your first Dapp on Optimism and use Optimism APIs? Check out the following tutorials to learn how to build on Optimism: Optimism SDK Examples Optimism API FAQ How to Add Optimism To Metamask For full documentation on the available endpoints for alchemy-sdk, check the github repo: github.com GitHub - alchemyplatform/alchemy-sdk-js: The easiest way to connect your dApp to the blockchain. ReadMe"
1,https://docs.alchemy.com/changelog,"added [May 1, 2023] Two factor verification at signup Posted by Dannika 1 day ago We’ve added an additional verification step to our signup flow, wherein some users will be asked to verify their identity via SMS code or phone call. 📱 added [Apr 21, 2023] Added address limit to ""Add and remove webhooks addresses"" endpoint Posted by Dannika 12 days ago We've shipped a change to limit the number of addresses a user can send to the ""Add and remove webhooks addresses"" endpoint to 100 addresses per request in order to prevent large payloads from breaking things. added [Apr 11, 2023] New security feature: Account lockout Posted by Dannika 22 days ago We've added account lockout functionality to further secure your accounts. added [April 4, 2023] NFT API On Sepolia Posted by Andrew 29 days ago The Alchemy NFT API is now available on the Ethereum Sepolia testnet! This support includes all of the same NFT API methods that are currently available on the Ethereum Goerli testnet. added [March 27th, 2023] Added support for Polygon zkEVM chain Posted by Elan about 1 month ago We have officially added support for Polygon zkEVM, get started by visiting Polygon zkEVM Quickstart . removed [Mar 17, 2023] Removed support for Crypto.org network Posted by Elan about 1 month ago Starting on March 17, 2023 we no longer support existing and new accounts on Crypto.org. We have communicated this over email to impacted teams, and are adding here for posterity."
2,https://docs.alchemy.com/changelog,"added [Mar 2, 2023] Added 'indexed' block tag to Transfers API Posted by Andrew 2 months ago We have added indexed as a block tag param for alchemy_getAssetTransfers . This block tag can be used instead of latest as the fromBlock or toBlock param. Under normal circumstances, indexed will have the same behavior as latest . However, under certain unusual situations such as a network fork or partial network outage, transfers data up to the latest block may not be available. In these cases, if latest is used as the toBlock , we will return an error; however with indexed , we will instead try to return whatever transfers data is available. [Feb 27, 2023] Added support for Polygon, Arbitrum, and Optimism in NFT Activity webhooks Posted by undefined 2 months ago NFT Activity Webhooks are now supported on Polygon, Arbitrum, and Optimism mainnet and testnets. added [Jan 25, 2023] New endpoints - Transaction Simulation Posted by Bastien 3 months ago We are excited to release alchemy_simulateAssetChanges and alchemy_simulateExecution . More below. 🎉 improved [ Jan 6, 2023] Increased limit for pending and mined transaction subscriptions Posted by undefined 4 months ago The address limit for alchemy_pendingTransactions and alchemy_minedTransactions WebSocket subscriptions has increased from 100 addresses to 1000 addresses. ReadMe"
1,https://docs.alchemy.com/reference/ethereum-api-quickstart,"To use the Ethereum API you'll need to create a free Alchemy account first! What is the Ethereum API? The Ethereum API allows applications to connect to an Ethereum node that is part of the Ethereum blockchain. Developers can interact with on-chain data and send different types of transactions to the network by utilizing the endpoints provided by the API. The API follows a JSON-RPC standard. JSON-RPC is a stateless, lightweight, remote procedure call (RPC) protocol that is commonly used when interacting with Ethereum. Getting Started Instructions 1. Choose a package manager (npm or yarn) For this guide, we will be using npm or yarn as our package manager to install either alchemy-sdk or any other packages. npm To get started with npm , follow the documentation to install Node.js and npm for your operating system: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm yarn To get started with yarn , follow these steps: https://classic.yarnpkg.com/lang/en/docs/install 2. Set up your project (npm or yarn) Shell (npm) Shell (yarn) mkdir alchemy-ethereum-api cd alchemy-ethereum-api npm init --yes mkdir alchemy-ethereum-api cd alchemy-ethereum-api yarn init --yes 3. Install Alchemy-SDK Run the following command to install the Alchemy SDK with npm and yarn npm yarn npm install alchemy-sdk yarn add alchemy-sdk 4. Make your first request You are all set now to use Ethereum API and make your first request. For instance, lets make a request to get latest block . Go to index.js and paste the following code snippet into the file."
2,https://docs.alchemy.com/reference/ethereum-api-quickstart,"index.js // Setup: npm install @alch/alchemy-sdk const { Network, Alchemy } = require(""alchemy-sdk""); // Optional Config object, but defaults to demo api-key and eth-mainnet. const settings = { apiKey: ""demo"", // Replace with your Alchemy API Key. network: Network. ETH_MAINNET, // Replace with your network. }; const alchemy = new Alchemy(settings); async function main() { const latestBlock = await alchemy.core.getBlockNumber(); console.log(""The latest block number is"", latestBlock); } main(); 5. Run script To run the above node script, use cmd node index.js , and you should see the output. shell The latest block number is 11043912 You must not stop here! Want to build your first Dapp and use Ethereum APIs? Head towards Alchemy Tutorials. View : https://docs.alchemy.com/docs For full documentation on the available endpoints for alchemy-sdk, check the github repo: github.com GitHub - alchemyplatform/alchemy-sdk-js: The easiest way to connect your dApp to the blockchain. ReadMe"
